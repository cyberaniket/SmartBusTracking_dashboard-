2025-05-25 18:29:04,459 - semgrep.notifications - WARNING - METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

2025-05-25 18:29:04,460 - semgrep.run_scan - DEBUG - semgrep version 1.2.0
2025-05-25 18:29:04,464 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-05-25 18:29:04,464 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-25 18:29:04,466 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-25 18:29:04,469 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-r7j110s6.rules
2025-05-25 18:29:04,625 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIfGslmI/semgrep/bin/semgrep-core-proprietary'.
2025-05-25 18:29:05,087 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-05-25 18:29:05,087 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-05-25 18:29:05,087 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-05-25 18:29:05,087 - semgrep.config_resolver - DEBUG - loaded 1 configs in 0.6231775283813477
2025-05-25 18:29:05,156 - semgrep.run_scan - VERBOSE - running 711 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-05-25 18:29:05,156 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-05-25 18:29:05,158 - semgrep.run_scan - VERBOSE - Rules:
2025-05-25 18:29:05,158 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-05-25 18:29:05,312 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-05-25 18:29:05,427 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-05-25 18:29:05,427 - semgrep.core_runner - DEBUG - /tmp/_MEIfGslmI/semgrep/bin/opengrep-core -json -rules /tmp/tmp2uwlbzd1.json -j 8 -targets /tmp/tmpiqt2r23d -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-05-25 18:29:08,421 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.08][[34mINFO[0m]: Executed as: /tmp/_MEIfGslmI/semgrep/bin/opengrep-core -json -rules /tmp/tmp2uwlbzd1.json -j 8 -targets /tmp/tmpiqt2r23d -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.08][[34mINFO[0m]: Version: 1.2.0
[00.08][[34mINFO[0m]: Parsing rules in /tmp/tmp2uwlbzd1.json
[00.56][[34mINFO[0m]: scan: processing 69 files (skipping 0), with 701 rules (skipping 0 )
[02.94][[34mINFO[0m]: Custom ignore pattern: None
[02.94][[34mINFO[0m]: Custom ignore pattern: None
--- end semgrep-core stderr ---
2025-05-25 18:29:08,435 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = f5a1d78d28043340433dedc0a20165e63b50d9aa4305aede97be74105c8207b5b89db08fa6703decc4ec27aafa081254be07d38814f40c19f447cf4721551845_0
2025-05-25 18:29:08,437 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-05-25 18:29:08,437 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-05-25 18:29:08,438 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-05-25 18:29:08,438 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('mobile_api.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = d9121b87189bd9667a45d58f4ae6326b3bad7bfc989b074cfde56ddc4b44d9cbf213352ecde45a1d58b5aba75c58ffae7fcf44ad165d3b295e52f747a90385fe_0
2025-05-25 18:29:08,439 - semgrep.rule_match - DEBUG - match_key = ("new_user.set_password(data['password']) UserModel().set_password(data['password']) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n", PosixPath('mobile_api.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 6047b875fe7da62ae495633c50fb9beeaaa72a363bd346c695fabb9bdcd7352d9817b359d02ae434bdd1a90bdfcc8b22f75c5718d5637b3e1342a9d3204697c2_0
2025-05-25 18:29:08,440 - semgrep.rule_match - DEBUG - match_key = ("new_user.set_password(data['password']) UserModel().set_password(data['password']) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n", PosixPath('mobile_api.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 6047b875fe7da62ae495633c50fb9beeaaa72a363bd346c695fabb9bdcd7352d9817b359d02ae434bdd1a90bdfcc8b22f75c5718d5637b3e1342a9d3204697c2_0
2025-05-25 18:29:08,441 - semgrep.rule_match - DEBUG - match_key = ("new_user.set_password(data['password']) UserModel().set_password(data['password']) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n", PosixPath('mobile_api.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 6047b875fe7da62ae495633c50fb9beeaaa72a363bd346c695fabb9bdcd7352d9817b359d02ae434bdd1a90bdfcc8b22f75c5718d5637b3e1342a9d3204697c2_0
2025-05-25 18:29:08,442 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = bb939d2a12b872f2a97c992da7b238e8e44508a1c2acc42a75e0dfb6ce6cdfc07862bb91531a3b53283314f60c7789a03936ab2942d95bebb944c9a404a89589_0
2025-05-25 18:29:08,443 - semgrep.rule_match - DEBUG - match_key = ('activityItem.innerHTML = "...";\n activityItem.innerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = a39fc20f2a184da440c79f75d82311b6d3c16a794cd3c148ae5aadf06f5e8a11022ee75a5938e868c96b5d8d49c8d38cea23a849983822dbdd6672388b45c833_0
2025-05-25 18:29:08,443 - semgrep.rule_match - DEBUG - match_key = ('activityItem.innerHTML = "...";\n activityItem.innerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = a39fc20f2a184da440c79f75d82311b6d3c16a794cd3c148ae5aadf06f5e8a11022ee75a5938e868c96b5d8d49c8d38cea23a849983822dbdd6672388b45c833_0
2025-05-25 18:29:08,444 - semgrep.rule_match - DEBUG - match_key = ('activityItem.innerHTML = "...";\n activityItem.innerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = a39fc20f2a184da440c79f75d82311b6d3c16a794cd3c148ae5aadf06f5e8a11022ee75a5938e868c96b5d8d49c8d38cea23a849983822dbdd6672388b45c833_0
2025-05-25 18:29:08,445 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = fb2a0f63e0de4bb4231e2426a7138ec06b4d375bacadc07ad4d5793b548d92695abd6c086db650b435b2c775f106f041186da38ea069ac6c64cb3fb1f542025d_0
2025-05-25 18:29:08,445 - semgrep.rule_match - DEBUG - match_key = ('activityItem.innerHTML = "...";\n activityItem.innerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n activityItem.outerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n document.write(...) activityItem.outerHTML = "...";\n document.write("...")', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = bc5db8f54fa7b0de73f51043477b2f8f344571512c5639fdbb78381d4de60b961d915521a0d60c42614642d76461bffc0606040291507b69a7eac34abc5e3658_0
2025-05-25 18:29:08,446 - semgrep.rule_match - DEBUG - match_key = ('activityItem.innerHTML = "...";\n activityItem.innerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n activityItem.outerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n document.write(...) activityItem.outerHTML = "...";\n document.write("...")', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = bc5db8f54fa7b0de73f51043477b2f8f344571512c5639fdbb78381d4de60b961d915521a0d60c42614642d76461bffc0606040291507b69a7eac34abc5e3658_0
2025-05-25 18:29:08,447 - semgrep.rule_match - DEBUG - match_key = ('activityItem.innerHTML = "...";\n activityItem.innerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n activityItem.outerHTML = `\n            <div class="d-flex w-100 justify-content-between">\n                <div>\n                    <i class="activity.icon me-2"></i>\n                    activity.message\n                </div>\n                <small class="text-muted">timeStr</small>\n            </div>\n        ;\n document.write(...) activityItem.outerHTML = "...";\n document.write("...")', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = bc5db8f54fa7b0de73f51043477b2f8f344571512c5639fdbb78381d4de60b961d915521a0d60c42614642d76461bffc0606040291507b69a7eac34abc5e3658_0
2025-05-25 18:29:08,447 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 05ce709ccb3b25844f0f999781120bd8b112a0fed5011b1f18125f2f57952a53b2f65f3a3b5141a4bfc9bf4fdf754756f56da5e44803015ec8710a79bd1dc6ae_0
2025-05-25 18:29:08,448 - semgrep.rule_match - DEBUG - match_key = ('</small>\n            </div>\n         .*</?[a-zA-Z] `</small>\n            </div>\n        ${timeStr}...`\n `...${timeStr}</small>\n            </div>\n        `\n', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 085219a39fbc7ea150978bb9a548e0382edd8e4e777a8ec05474de9f76217e95429a60e3f304a77ab2edb82ab8d256d0e4297afb1f753ed19a78875055c06d70_0
2025-05-25 18:29:08,449 - semgrep.rule_match - DEBUG - match_key = ('</small>\n            </div>\n         .*</?[a-zA-Z] `</small>\n            </div>\n        ${timeStr}...`\n `...${timeStr}</small>\n            </div>\n        `\n', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 085219a39fbc7ea150978bb9a548e0382edd8e4e777a8ec05474de9f76217e95429a60e3f304a77ab2edb82ab8d256d0e4297afb1f753ed19a78875055c06d70_0
2025-05-25 18:29:08,449 - semgrep.rule_match - DEBUG - match_key = ('</small>\n            </div>\n         .*</?[a-zA-Z] `</small>\n            </div>\n        ${timeStr}...`\n `...${timeStr}</small>\n            </div>\n        `\n', PosixPath('static/js/dashboard.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 085219a39fbc7ea150978bb9a548e0382edd8e4e777a8ec05474de9f76217e95429a60e3f304a77ab2edb82ab8d256d0e4297afb1f753ed19a78875055c06d70_0
2025-05-25 18:29:08,450 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 4beb81f9a5e1cdb311fd739c2e7e84036a336dd16532915b862569fe2e6bdd5404f3dbabd0b139fbabcd350263baa5d660a0eec4c3f6dab16adde7c6e50d49a3_0
2025-05-25 18:29:08,451 - semgrep.rule_match - DEBUG - match_key = ('<div class="stop-label"> .*</?[a-zA-Z] `<div class="stop-label">${stop.name}...`\n `...${stop.name}<div class="stop-label">`\n', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 0f0492763df6cf904953a5c4be22eb99a2d23ff2060670647c072b394bf812312b5e8efe5832c374836c8662114d282e8fae83535dade38be76980bddd928713_0
2025-05-25 18:29:08,451 - semgrep.rule_match - DEBUG - match_key = ('<div class="stop-label"> .*</?[a-zA-Z] `<div class="stop-label">${stop.name}...`\n `...${stop.name}<div class="stop-label">`\n', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 0f0492763df6cf904953a5c4be22eb99a2d23ff2060670647c072b394bf812312b5e8efe5832c374836c8662114d282e8fae83535dade38be76980bddd928713_0
2025-05-25 18:29:08,452 - semgrep.rule_match - DEBUG - match_key = ('<div class="stop-label"> .*</?[a-zA-Z] `<div class="stop-label">${stop.name}...`\n `...${stop.name}<div class="stop-label">`\n', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 0f0492763df6cf904953a5c4be22eb99a2d23ff2060670647c072b394bf812312b5e8efe5832c374836c8662114d282e8fae83535dade38be76980bddd928713_0
2025-05-25 18:29:08,453 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 4e7297c8ef001d0667af9807facc0bdc0f6665a429b3c44dba2a4a4eb37e9a08997a64bd45d03360181d2dee2e9db534fbfdce5bcd96a4393d9b9ddb84162cba_0
2025-05-25 18:29:08,454 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Error analyzing traffic for route routeId: $UTIL = require(\'util\')\n...\n $UTIL.format(`Error analyzing traffic for route routeId:,error,...)\n console.error(`Error analyzing traffic for route routeId:,error,...)\n', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = c5dba896fba3322780ca04b30ab671b6ac438678d8b83e8bb725b4b04d67395e1ae158db423f53d21dcb2b1355b915148a36e91e75d62693c2eb0960f280e414_0
2025-05-25 18:29:08,454 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Error analyzing traffic for route routeId: $UTIL = require(\'util\')\n...\n $UTIL.format(`Error analyzing traffic for route routeId:,error,...)\n console.error(`Error analyzing traffic for route routeId:,error,...)\n', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = c5dba896fba3322780ca04b30ab671b6ac438678d8b83e8bb725b4b04d67395e1ae158db423f53d21dcb2b1355b915148a36e91e75d62693c2eb0960f280e414_0
2025-05-25 18:29:08,455 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Error analyzing traffic for route routeId: $UTIL = require(\'util\')\n...\n $UTIL.format(`Error analyzing traffic for route routeId:,error,...)\n console.error(`Error analyzing traffic for route routeId:,error,...)\n', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = c5dba896fba3322780ca04b30ab671b6ac438678d8b83e8bb725b4b04d67395e1ae158db423f53d21dcb2b1355b915148a36e91e75d62693c2eb0960f280e414_0
2025-05-25 18:29:08,456 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 4beb81f9a5e1cdb311fd739c2e7e84036a336dd16532915b862569fe2e6bdd5404f3dbabd0b139fbabcd350263baa5d660a0eec4c3f6dab16adde7c6e50d49a3_0
2025-05-25 18:29:08,456 - semgrep.rule_match - DEBUG - match_key = ("</p>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                    </div>\n                ${place.formatted_address||''}...`\n `...${place.formatted_address||''}</p>\n                    </div>\n                `\n", PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d207daa403719b46e7a87d9c7884436f95bc53e2e42a742ec000b49d7e65d4d8f0abcfffed2a93c10b50cee7bc4681ab117123c43eba185abcbf9bf30be1903f_0
2025-05-25 18:29:08,457 - semgrep.rule_match - DEBUG - match_key = ("</p>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                    </div>\n                ${place.formatted_address||''}...`\n `...${place.formatted_address||''}</p>\n                    </div>\n                `\n", PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d207daa403719b46e7a87d9c7884436f95bc53e2e42a742ec000b49d7e65d4d8f0abcfffed2a93c10b50cee7bc4681ab117123c43eba185abcbf9bf30be1903f_0
2025-05-25 18:29:08,457 - semgrep.rule_match - DEBUG - match_key = ("</p>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                    </div>\n                ${place.formatted_address||''}...`\n `...${place.formatted_address||''}</p>\n                    </div>\n                `\n", PosixPath('static/js/map.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d207daa403719b46e7a87d9c7884436f95bc53e2e42a742ec000b49d7e65d4d8f0abcfffed2a93c10b50cee7bc4681ab117123c43eba185abcbf9bf30be1903f_0
2025-05-25 18:29:08,458 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/traffic_incidents.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = edc6423d8b5ad8a06e9ebcd6160b63a73f42aab9403983ee9a14cb8eba9b9008589b7bd78291fb42cadff4b89320f08c9fcc0ea5cceae91a2ef46a98180d32e1_0
2025-05-25 18:29:08,458 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Detour:</strong>  .*</?[a-zA-Z] `<p><strong>Detour:</strong> ${incident.detour}...`\n `...${incident.detour}<p><strong>Detour:</strong> `\n', PosixPath('static/js/traffic_incidents.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 6f525b12290d4b536f3040e08b4c4eaedd5665cf58148a6912061932dc862e1d6861b8f2b7bdbec93c6d055a44007f961f9d43e30d5d37f534e0e49e5979e45f_0
2025-05-25 18:29:08,459 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Detour:</strong>  .*</?[a-zA-Z] `<p><strong>Detour:</strong> ${incident.detour}...`\n `...${incident.detour}<p><strong>Detour:</strong> `\n', PosixPath('static/js/traffic_incidents.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 6f525b12290d4b536f3040e08b4c4eaedd5665cf58148a6912061932dc862e1d6861b8f2b7bdbec93c6d055a44007f961f9d43e30d5d37f534e0e49e5979e45f_0
2025-05-25 18:29:08,459 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Detour:</strong>  .*</?[a-zA-Z] `<p><strong>Detour:</strong> ${incident.detour}...`\n `...${incident.detour}<p><strong>Detour:</strong> `\n', PosixPath('static/js/traffic_incidents.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 6f525b12290d4b536f3040e08b4c4eaedd5665cf58148a6912061932dc862e1d6861b8f2b7bdbec93c6d055a44007f961f9d43e30d5d37f534e0e49e5979e45f_0
2025-05-25 18:29:08,460 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-05-25 18:29:08,460 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" > <script  rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = ae9ae9565dbb872e17f8e284decadd4165d0220ff69bd74af284ca50ef0c2ecebfd38fc6aee39b15d13599e7054436729e0da4f580248328aabeaf94c9bc922c_0
2025-05-25 18:29:08,461 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" > <script  rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = ae9ae9565dbb872e17f8e284decadd4165d0220ff69bd74af284ca50ef0c2ecebfd38fc6aee39b15d13599e7054436729e0da4f580248328aabeaf94c9bc922c_0
2025-05-25 18:29:08,461 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" > <script  rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = ae9ae9565dbb872e17f8e284decadd4165d0220ff69bd74af284ca50ef0c2ecebfd38fc6aee39b15d13599e7054436729e0da4f580248328aabeaf94c9bc922c_0
2025-05-25 18:29:08,462 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-05-25 18:29:08,462 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 9730ca0bac49836b80d4f868d7e4abe0c2012ab0c854c05b92e5d04e523043a4e777ce1996047990ae37effb507810187296c04f62ea8eb8ee7e0c0386c97719_0
2025-05-25 18:29:08,462 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 9730ca0bac49836b80d4f868d7e4abe0c2012ab0c854c05b92e5d04e523043a4e777ce1996047990ae37effb507810187296c04f62ea8eb8ee7e0c0386c97719_0
2025-05-25 18:29:08,463 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 9730ca0bac49836b80d4f868d7e4abe0c2012ab0c854c05b92e5d04e523043a4e777ce1996047990ae37effb507810187296c04f62ea8eb8ee7e0c0386c97719_0
2025-05-25 18:29:08,463 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-05-25 18:29:08,464 - semgrep.rule_match - DEBUG - match_key = (' src="https://polyfill.io/v3/polyfill.min.js?features=default" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://polyfill.io/v3/polyfill.min.js?features=default" > <script  src="https://polyfill.io/v3/polyfill.min.js?features=default" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7806a769c56b9b2aed2e6506f80cbcb27bdf73f96ecd006f3c1901992faa22c5482038473b64e1e1f649a20a1340f1a4080e166cdfa95a990d010bb011108fee_0
2025-05-25 18:29:08,464 - semgrep.rule_match - DEBUG - match_key = (' src="https://polyfill.io/v3/polyfill.min.js?features=default" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://polyfill.io/v3/polyfill.min.js?features=default" > <script  src="https://polyfill.io/v3/polyfill.min.js?features=default" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7806a769c56b9b2aed2e6506f80cbcb27bdf73f96ecd006f3c1901992faa22c5482038473b64e1e1f649a20a1340f1a4080e166cdfa95a990d010bb011108fee_0
2025-05-25 18:29:08,465 - semgrep.rule_match - DEBUG - match_key = (' src="https://polyfill.io/v3/polyfill.min.js?features=default" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://polyfill.io/v3/polyfill.min.js?features=default" > <script  src="https://polyfill.io/v3/polyfill.min.js?features=default" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7806a769c56b9b2aed2e6506f80cbcb27bdf73f96ecd006f3c1901992faa22c5482038473b64e1e1f649a20a1340f1a4080e166cdfa95a990d010bb011108fee_0
2025-05-25 18:29:08,465 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-05-25 18:29:08,466 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e7adbde08c9499f55646672620f1bc4cbb684528fee8e9bff39f91c9c993ef3dc3d98d1e480ba58278e11e34a652543aa2ad09eaadd1ea053916d0a273f3f4a3_0
2025-05-25 18:29:08,466 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e7adbde08c9499f55646672620f1bc4cbb684528fee8e9bff39f91c9c993ef3dc3d98d1e480ba58278e11e34a652543aa2ad09eaadd1ea053916d0a273f3f4a3_0
2025-05-25 18:29:08,467 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e7adbde08c9499f55646672620f1bc4cbb684528fee8e9bff39f91c9c993ef3dc3d98d1e480ba58278e11e34a652543aa2ad09eaadd1ea053916d0a273f3f4a3_0
2025-05-25 18:29:08,467 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-05-25 18:29:08,468 - semgrep.rule_match - DEBUG - match_key = (' src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer > <script  src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 912f4b8bd205ccf099679920e7b49ffdfebf1f7a89fb46ffa19811ed427f67b612da33112c3b1f1d66341012c1e22775c447f52544641543009c98ac7cf33be5_0
2025-05-25 18:29:08,468 - semgrep.rule_match - DEBUG - match_key = (' src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer > <script  src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 912f4b8bd205ccf099679920e7b49ffdfebf1f7a89fb46ffa19811ed427f67b612da33112c3b1f1d66341012c1e22775c447f52544641543009c98ac7cf33be5_0
2025-05-25 18:29:08,469 - semgrep.rule_match - DEBUG - match_key = (' src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer > <script  src="https://maps.googleapis.com/maps/api/js?key={{ config.GOOGLE_MAPS_API_KEY }}&libraries=visualization,places,geometry&callback=Function.prototype&v=weekly" defer >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 912f4b8bd205ccf099679920e7b49ffdfebf1f7a89fb46ffa19811ed427f67b612da33112c3b1f1d66341012c1e22775c447f52544641543009c98ac7cf33be5_0
2025-05-25 18:29:08,469 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = f8aa57369276825bf517534a86c2d85f1632e1e3aef64c24b2676a400bd96afcc612399723388d0f2025cf2b5b17b5f8d9d7c499bdfdc9a7fcd861f8aafe12b5_0
2025-05-25 18:29:08,470 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_0
2025-05-25 18:29:08,470 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_0
2025-05-25 18:29:08,471 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_0
2025-05-25 18:29:08,471 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-05-25 18:29:08,472 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 6ee90349331dd49dc68d5e736dfbaca57653791f201e9095b1bac687f540f8ca880c17b45080ada9541fc833f7dfb2ffd2ed5d474b9767f156c9e13e3ce1185b_0
2025-05-25 18:29:08,473 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 6ee90349331dd49dc68d5e736dfbaca57653791f201e9095b1bac687f540f8ca880c17b45080ada9541fc833f7dfb2ffd2ed5d474b9767f156c9e13e3ce1185b_0
2025-05-25 18:29:08,473 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 6ee90349331dd49dc68d5e736dfbaca57653791f201e9095b1bac687f540f8ca880c17b45080ada9541fc833f7dfb2ffd2ed5d474b9767f156c9e13e3ce1185b_0
2025-05-25 18:29:08,474 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = f8aa57369276825bf517534a86c2d85f1632e1e3aef64c24b2676a400bd96afcc612399723388d0f2025cf2b5b17b5f8d9d7c499bdfdc9a7fcd861f8aafe12b5_0
2025-05-25 18:29:08,474 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_0
2025-05-25 18:29:08,474 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_0
2025-05-25 18:29:08,475 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_1
2025-05-25 18:29:08,477 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/buses.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6587e48d2124a0e3f26433f4955fe79331cd7eebbb0cf73779d58f8fa20083ac9311fa2c4dfd99f97b5403bd71e4fa68e629fe095cad632b5491ded055ae1965_0
2025-05-25 18:29:08,479 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Load routes for the dropdown\n        loadRoutes();\n        \n        // Set up event listeners\n        document.getElementById(\'saveBusBtn\').addEventListener(\'click\', saveBus);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                viewBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                editBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                deleteBus(busId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'busSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#busTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n    });\n    \n    function loadRoutes() {\n        // This would be replaced with an actual API call\n        fetch(\'/api/routes\')\n            .then(response => response.json())\n            .then(routes => {\n                const routeSelect = document.getElementById(\'routeSelect\');\n                \n                routes.forEach(route => {\n                    const option = document.createElement(\'option\');\n                    option.value = route.id;\n                    option.textContent = `${route.route_number} - ${route.name}`;\n                    routeSelect.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading routes:\', error);\n            });\n    }\n    \n    function saveBus() {\n        // Get form values\n        const busNumber = document.getElementById(\'busNumber\').value;\n        const licensePlate = document.getElementById(\'licensePlate\').value;\n        const capacity = document.getElementById(\'capacity\').value;\n        const routeId = document.getElementById(\'routeSelect\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // This would be replaced with an actual API call\n        const busData = {\n            bus_number: busNumber,\n            license_plate: licensePlate,\n            capacity: parseInt(capacity),\n            current_route_id: routeId || null,\n            is_active: isActive\n        };\n        \n        console.log(\'Bus data to save:\', busData);\n        alert(\'Bus added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addBusModal\'));\n        modal.hide();\n        document.getElementById(\'addBusForm\').reset();\n        \n        // In a real application, we would refresh the bus list or add the new bus to the table\n    }\n    \n    function viewBus(busId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/bus/${busId}`)\n            .then(response => response.json())\n            .then(bus => {\n                // Populate the view modal with bus details\n                document.getElementById(\'viewBusNumber\').textContent = bus.bus_number;\n                document.getElementById(\'viewLicensePlate\').textContent = bus.license_plate;\n                document.getElementById(\'viewCapacity\').textContent = bus.capacity || \'50\';\n                \n                // Set status badge\n                const statusElement = document.getElementById(\'viewStatus\');\n                if (bus.is_active) {\n                    statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                } else {\n                    statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                }\n                \n                // Set coordinates and last updated\n                if (bus.latitude && bus.longitude) {\n                    document.getElementById(\'viewCoordinates\').textContent = \n                        `${bus.latitude.toFixed(4)}, ${bus.longitude.toFixed(4)}`;\n                    \n                    // Initialize the small map\n                    const map = L.map(\'viewBusMap\').setView([bus.latitude, bus.longitude], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    // Add bus marker\n                    L.marker([bus.latitude, bus.longitude]).addTo(map);\n                } else {\n                    document.getElementById(\'viewCoordinates\').textContent = \'Unknown\';\n                    document.getElementById(\'viewBusMap\').innerHTML = \n                        \'<div class="alert alert-info">No location data available</div>\';\n                }\n                \n                document.getElementById(\'viewLastUpdated\').textContent = \n                    bus.last_updated ? new Date(bus.last_updated).toLocaleString() : \'Never\';\n                \n                // Set route info\n                if (bus.route) {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        `<strong>Current Route:</strong> ${bus.route.route_number} - ${bus.route.name}`;\n                } else {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        \'<div class="alert alert-warning">No route assigned</div>\';\n                }\n                \n                // Populate stops table with ETAs\n                const stopsTable = document.getElementById(\'viewStopsTable\');\n                stopsTable.innerHTML = \'\';\n                \n                if (bus.eta_predictions && bus.eta_predictions.length > 0) {\n                    bus.eta_predictions.forEach(eta => {\n                        const row = document.createElement(\'tr\');\n                        \n                        // Stop name\n                        const stopCell = document.createElement(\'td\');\n                        stopCell.textContent = eta.stop_name;\n                        \n                        // ETA time\n                        const etaCell = document.createElement(\'td\');\n                        const etaTime = new Date(eta.predicted_arrival);\n                        etaCell.textContent = etaTime.toLocaleTimeString();\n                        \n                        // Status\n                        const statusCell = document.createElement(\'td\');\n                        if (eta.is_delayed) {\n                            statusCell.innerHTML = `<span class="badge bg-warning text-dark">Delayed by ${eta.delay_minutes} min</span>`;\n                        } else {\n                            statusCell.innerHTML = `<span class="badge bg-success">On Time</span>`;\n                        }\n                        \n                        row.appendChild(stopCell);\n                        row.appendChild(etaCell);\n                        row.appendChild(statusCell);\n                        stopsTable.appendChild(row);\n                    });\n                } else {\n                    const row = document.createElement(\'tr\');\n                    const cell = document.createElement(\'td\');\n                    cell.setAttribute(\'colspan\', \'3\');\n                    cell.classList.add(\'text-center\');\n                    cell.textContent = \'No ETA predictions available\';\n                    row.appendChild(cell);\n                    stopsTable.appendChild(row);\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewBusModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching bus details:\', error);\n                alert(\'Failed to load bus details\');\n            });\n    }\n    \n    function editBus(busId) {\n        // In a real application, this would fetch the bus data and populate the edit form\n        alert(`Edit bus ${busId} (not implemented in this demo)`);\n    }\n    \n    function deleteBus(busId) {\n        // In a real application, this would show a confirmation dialog and then delete the bus\n        if (confirm(`Are you sure you want to delete bus with ID ${busId}?`)) {\n            alert(`Bus ${busId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Load routes for the dropdown\n        loadRoutes();\n        \n        // Set up event listeners\n        document.getElementById(\'saveBusBtn\').addEventListener(\'click\', saveBus);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                viewBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                editBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                deleteBus(busId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'busSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#busTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n    });\n    \n    function loadRoutes() {\n        // This would be replaced with an actual API call\n        fetch(\'/api/routes\')\n            .then(response => response.json())\n            .then(routes => {\n                const routeSelect = document.getElementById(\'routeSelect\');\n                \n                routes.forEach(route => {\n                    const option = document.createElement(\'option\');\n                    option.value = route.id;\n                    option.textContent = `${route.route_number} - ${route.name}`;\n                    routeSelect.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading routes:\', error);\n            });\n    }\n    \n    function saveBus() {\n        // Get form values\n        const busNumber = document.getElementById(\'busNumber\').value;\n        const licensePlate = document.getElementById(\'licensePlate\').value;\n        const capacity = document.getElementById(\'capacity\').value;\n        const routeId = document.getElementById(\'routeSelect\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // This would be replaced with an actual API call\n        const busData = {\n            bus_number: busNumber,\n            license_plate: licensePlate,\n            capacity: parseInt(capacity),\n            current_route_id: routeId || null,\n            is_active: isActive\n        };\n        \n        console.log(\'Bus data to save:\', busData);\n        alert(\'Bus added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addBusModal\'));\n        modal.hide();\n        document.getElementById(\'addBusForm\').reset();\n        \n        // In a real application, we would refresh the bus list or add the new bus to the table\n    }\n    \n    function viewBus(busId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/bus/${busId}`)\n            .then(response => response.json())\n            .then(bus => {\n                // Populate the view modal with bus details\n                document.getElementById(\'viewBusNumber\').textContent = bus.bus_number;\n                document.getElementById(\'viewLicensePlate\').textContent = bus.license_plate;\n                document.getElementById(\'viewCapacity\').textContent = bus.capacity || \'50\';\n                \n                // Set status badge\n                const statusElement = document.getElementById(\'viewStatus\');\n                if (bus.is_active) {\n                    statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                } else {\n                    statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                }\n                \n                // Set coordinates and last updated\n                if (bus.latitude && bus.longitude) {\n                    document.getElementById(\'viewCoordinates\').textContent = \n                        `${bus.latitude.toFixed(4)}, ${bus.longitude.toFixed(4)}`;\n                    \n                    // Initialize the small map\n                    const map = L.map(\'viewBusMap\').setView([bus.latitude, bus.longitude], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    // Add bus marker\n                    L.marker([bus.latitude, bus.longitude]).addTo(map);\n                } else {\n                    document.getElementById(\'viewCoordinates\').textContent = \'Unknown\';\n                    document.getElementById(\'viewBusMap\').innerHTML = \n                        \'<div class="alert alert-info">No location data available</div>\';\n                }\n                \n                document.getElementById(\'viewLastUpdated\').textContent = \n                    bus.last_updated ? new Date(bus.last_updated).toLocaleString() : \'Never\';\n                \n                // Set route info\n                if (bus.route) {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        `<strong>Current Route:</strong> ${bus.route.route_number} - ${bus.route.name}`;\n                } else {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        \'<div class="alert alert-warning">No route assigned</div>\';\n                }\n                \n                // Populate stops table with ETAs\n                const stopsTable = document.getElementById(\'viewStopsTable\');\n                stopsTable.innerHTML = \'\';\n                \n                if (bus.eta_predictions && bus.eta_predictions.length > 0) {\n                    bus.eta_predictions.forEach(eta => {\n                        const row = document.createElement(\'tr\');\n                        \n                        // Stop name\n                        const stopCell = document.createElement(\'td\');\n                        stopCell.textContent = eta.stop_name;\n                        \n                        // ETA time\n                        const etaCell = document.createElement(\'td\');\n                        const etaTime = new Date(eta.predicted_arrival);\n                        etaCell.textContent = etaTime.toLocaleTimeString();\n                        \n                        // Status\n                        const statusCell = document.createElement(\'td\');\n                        if (eta.is_delayed) {\n                            statusCell.innerHTML = `<span class="badge bg-warning text-dark">Delayed by ${eta.delay_minutes} min</span>`;\n                        } else {\n                            statusCell.innerHTML = `<span class="badge bg-success">On Time</span>`;\n                        }\n                        \n                        row.appendChild(stopCell);\n                        row.appendChild(etaCell);\n                        row.appendChild(statusCell);\n                        stopsTable.appendChild(row);\n                    });\n                } else {\n                    const row = document.createElement(\'tr\');\n                    const cell = document.createElement(\'td\');\n                    cell.setAttribute(\'colspan\', \'3\');\n                    cell.classList.add(\'text-center\');\n                    cell.textContent = \'No ETA predictions available\';\n                    row.appendChild(cell);\n                    stopsTable.appendChild(row);\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewBusModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching bus details:\', error);\n                alert(\'Failed to load bus details\');\n            });\n    }\n    \n    function editBus(busId) {\n        // In a real application, this would fetch the bus data and populate the edit form\n        alert(`Edit bus ${busId} (not implemented in this demo)`);\n    }\n    \n    function deleteBus(busId) {\n        // In a real application, this would show a confirmation dialog and then delete the bus\n        if (confirm(`Are you sure you want to delete bus with ID ${busId}?`)) {\n            alert(`Bus ${busId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/buses.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = a03216499a707e3c276a48d9b6d8878c828dfc3e36e50367ff2bbb60d35734f7105ac15cb4281000cbe7b2ccfddc77f9507015193fa66878d4279e5cf680797a_0
2025-05-25 18:29:08,482 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Load routes for the dropdown\n        loadRoutes();\n        \n        // Set up event listeners\n        document.getElementById(\'saveBusBtn\').addEventListener(\'click\', saveBus);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                viewBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                editBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                deleteBus(busId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'busSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#busTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n    });\n    \n    function loadRoutes() {\n        // This would be replaced with an actual API call\n        fetch(\'/api/routes\')\n            .then(response => response.json())\n            .then(routes => {\n                const routeSelect = document.getElementById(\'routeSelect\');\n                \n                routes.forEach(route => {\n                    const option = document.createElement(\'option\');\n                    option.value = route.id;\n                    option.textContent = `${route.route_number} - ${route.name}`;\n                    routeSelect.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading routes:\', error);\n            });\n    }\n    \n    function saveBus() {\n        // Get form values\n        const busNumber = document.getElementById(\'busNumber\').value;\n        const licensePlate = document.getElementById(\'licensePlate\').value;\n        const capacity = document.getElementById(\'capacity\').value;\n        const routeId = document.getElementById(\'routeSelect\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // This would be replaced with an actual API call\n        const busData = {\n            bus_number: busNumber,\n            license_plate: licensePlate,\n            capacity: parseInt(capacity),\n            current_route_id: routeId || null,\n            is_active: isActive\n        };\n        \n        console.log(\'Bus data to save:\', busData);\n        alert(\'Bus added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addBusModal\'));\n        modal.hide();\n        document.getElementById(\'addBusForm\').reset();\n        \n        // In a real application, we would refresh the bus list or add the new bus to the table\n    }\n    \n    function viewBus(busId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/bus/${busId}`)\n            .then(response => response.json())\n            .then(bus => {\n                // Populate the view modal with bus details\n                document.getElementById(\'viewBusNumber\').textContent = bus.bus_number;\n                document.getElementById(\'viewLicensePlate\').textContent = bus.license_plate;\n                document.getElementById(\'viewCapacity\').textContent = bus.capacity || \'50\';\n                \n                // Set status badge\n                const statusElement = document.getElementById(\'viewStatus\');\n                if (bus.is_active) {\n                    statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                } else {\n                    statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                }\n                \n                // Set coordinates and last updated\n                if (bus.latitude && bus.longitude) {\n                    document.getElementById(\'viewCoordinates\').textContent = \n                        `${bus.latitude.toFixed(4)}, ${bus.longitude.toFixed(4)}`;\n                    \n                    // Initialize the small map\n                    const map = L.map(\'viewBusMap\').setView([bus.latitude, bus.longitude], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    // Add bus marker\n                    L.marker([bus.latitude, bus.longitude]).addTo(map);\n                } else {\n                    document.getElementById(\'viewCoordinates\').textContent = \'Unknown\';\n                    document.getElementById(\'viewBusMap\').innerHTML = \n                        \'<div class="alert alert-info">No location data available</div>\';\n                }\n                \n                document.getElementById(\'viewLastUpdated\').textContent = \n                    bus.last_updated ? new Date(bus.last_updated).toLocaleString() : \'Never\';\n                \n                // Set route info\n                if (bus.route) {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        `<strong>Current Route:</strong> ${bus.route.route_number} - ${bus.route.name}`;\n                } else {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        \'<div class="alert alert-warning">No route assigned</div>\';\n                }\n                \n                // Populate stops table with ETAs\n                const stopsTable = document.getElementById(\'viewStopsTable\');\n                stopsTable.innerHTML = \'\';\n                \n                if (bus.eta_predictions && bus.eta_predictions.length > 0) {\n                    bus.eta_predictions.forEach(eta => {\n                        const row = document.createElement(\'tr\');\n                        \n                        // Stop name\n                        const stopCell = document.createElement(\'td\');\n                        stopCell.textContent = eta.stop_name;\n                        \n                        // ETA time\n                        const etaCell = document.createElement(\'td\');\n                        const etaTime = new Date(eta.predicted_arrival);\n                        etaCell.textContent = etaTime.toLocaleTimeString();\n                        \n                        // Status\n                        const statusCell = document.createElement(\'td\');\n                        if (eta.is_delayed) {\n                            statusCell.innerHTML = `<span class="badge bg-warning text-dark">Delayed by ${eta.delay_minutes} min</span>`;\n                        } else {\n                            statusCell.innerHTML = `<span class="badge bg-success">On Time</span>`;\n                        }\n                        \n                        row.appendChild(stopCell);\n                        row.appendChild(etaCell);\n                        row.appendChild(statusCell);\n                        stopsTable.appendChild(row);\n                    });\n                } else {\n                    const row = document.createElement(\'tr\');\n                    const cell = document.createElement(\'td\');\n                    cell.setAttribute(\'colspan\', \'3\');\n                    cell.classList.add(\'text-center\');\n                    cell.textContent = \'No ETA predictions available\';\n                    row.appendChild(cell);\n                    stopsTable.appendChild(row);\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewBusModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching bus details:\', error);\n                alert(\'Failed to load bus details\');\n            });\n    }\n    \n    function editBus(busId) {\n        // In a real application, this would fetch the bus data and populate the edit form\n        alert(`Edit bus ${busId} (not implemented in this demo)`);\n    }\n    \n    function deleteBus(busId) {\n        // In a real application, this would show a confirmation dialog and then delete the bus\n        if (confirm(`Are you sure you want to delete bus with ID ${busId}?`)) {\n            alert(`Bus ${busId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Load routes for the dropdown\n        loadRoutes();\n        \n        // Set up event listeners\n        document.getElementById(\'saveBusBtn\').addEventListener(\'click\', saveBus);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                viewBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                editBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                deleteBus(busId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'busSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#busTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n    });\n    \n    function loadRoutes() {\n        // This would be replaced with an actual API call\n        fetch(\'/api/routes\')\n            .then(response => response.json())\n            .then(routes => {\n                const routeSelect = document.getElementById(\'routeSelect\');\n                \n                routes.forEach(route => {\n                    const option = document.createElement(\'option\');\n                    option.value = route.id;\n                    option.textContent = `${route.route_number} - ${route.name}`;\n                    routeSelect.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading routes:\', error);\n            });\n    }\n    \n    function saveBus() {\n        // Get form values\n        const busNumber = document.getElementById(\'busNumber\').value;\n        const licensePlate = document.getElementById(\'licensePlate\').value;\n        const capacity = document.getElementById(\'capacity\').value;\n        const routeId = document.getElementById(\'routeSelect\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // This would be replaced with an actual API call\n        const busData = {\n            bus_number: busNumber,\n            license_plate: licensePlate,\n            capacity: parseInt(capacity),\n            current_route_id: routeId || null,\n            is_active: isActive\n        };\n        \n        console.log(\'Bus data to save:\', busData);\n        alert(\'Bus added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addBusModal\'));\n        modal.hide();\n        document.getElementById(\'addBusForm\').reset();\n        \n        // In a real application, we would refresh the bus list or add the new bus to the table\n    }\n    \n    function viewBus(busId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/bus/${busId}`)\n            .then(response => response.json())\n            .then(bus => {\n                // Populate the view modal with bus details\n                document.getElementById(\'viewBusNumber\').textContent = bus.bus_number;\n                document.getElementById(\'viewLicensePlate\').textContent = bus.license_plate;\n                document.getElementById(\'viewCapacity\').textContent = bus.capacity || \'50\';\n                \n                // Set status badge\n                const statusElement = document.getElementById(\'viewStatus\');\n                if (bus.is_active) {\n                    statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                } else {\n                    statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                }\n                \n                // Set coordinates and last updated\n                if (bus.latitude && bus.longitude) {\n                    document.getElementById(\'viewCoordinates\').textContent = \n                        `${bus.latitude.toFixed(4)}, ${bus.longitude.toFixed(4)}`;\n                    \n                    // Initialize the small map\n                    const map = L.map(\'viewBusMap\').setView([bus.latitude, bus.longitude], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    // Add bus marker\n                    L.marker([bus.latitude, bus.longitude]).addTo(map);\n                } else {\n                    document.getElementById(\'viewCoordinates\').textContent = \'Unknown\';\n                    document.getElementById(\'viewBusMap\').innerHTML = \n                        \'<div class="alert alert-info">No location data available</div>\';\n                }\n                \n                document.getElementById(\'viewLastUpdated\').textContent = \n                    bus.last_updated ? new Date(bus.last_updated).toLocaleString() : \'Never\';\n                \n                // Set route info\n                if (bus.route) {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        `<strong>Current Route:</strong> ${bus.route.route_number} - ${bus.route.name}`;\n                } else {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        \'<div class="alert alert-warning">No route assigned</div>\';\n                }\n                \n                // Populate stops table with ETAs\n                const stopsTable = document.getElementById(\'viewStopsTable\');\n                stopsTable.innerHTML = \'\';\n                \n                if (bus.eta_predictions && bus.eta_predictions.length > 0) {\n                    bus.eta_predictions.forEach(eta => {\n                        const row = document.createElement(\'tr\');\n                        \n                        // Stop name\n                        const stopCell = document.createElement(\'td\');\n                        stopCell.textContent = eta.stop_name;\n                        \n                        // ETA time\n                        const etaCell = document.createElement(\'td\');\n                        const etaTime = new Date(eta.predicted_arrival);\n                        etaCell.textContent = etaTime.toLocaleTimeString();\n                        \n                        // Status\n                        const statusCell = document.createElement(\'td\');\n                        if (eta.is_delayed) {\n                            statusCell.innerHTML = `<span class="badge bg-warning text-dark">Delayed by ${eta.delay_minutes} min</span>`;\n                        } else {\n                            statusCell.innerHTML = `<span class="badge bg-success">On Time</span>`;\n                        }\n                        \n                        row.appendChild(stopCell);\n                        row.appendChild(etaCell);\n                        row.appendChild(statusCell);\n                        stopsTable.appendChild(row);\n                    });\n                } else {\n                    const row = document.createElement(\'tr\');\n                    const cell = document.createElement(\'td\');\n                    cell.setAttribute(\'colspan\', \'3\');\n                    cell.classList.add(\'text-center\');\n                    cell.textContent = \'No ETA predictions available\';\n                    row.appendChild(cell);\n                    stopsTable.appendChild(row);\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewBusModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching bus details:\', error);\n                alert(\'Failed to load bus details\');\n            });\n    }\n    \n    function editBus(busId) {\n        // In a real application, this would fetch the bus data and populate the edit form\n        alert(`Edit bus ${busId} (not implemented in this demo)`);\n    }\n    \n    function deleteBus(busId) {\n        // In a real application, this would show a confirmation dialog and then delete the bus\n        if (confirm(`Are you sure you want to delete bus with ID ${busId}?`)) {\n            alert(`Bus ${busId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/buses.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = a03216499a707e3c276a48d9b6d8878c828dfc3e36e50367ff2bbb60d35734f7105ac15cb4281000cbe7b2ccfddc77f9507015193fa66878d4279e5cf680797a_0
2025-05-25 18:29:08,485 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Load routes for the dropdown\n        loadRoutes();\n        \n        // Set up event listeners\n        document.getElementById(\'saveBusBtn\').addEventListener(\'click\', saveBus);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                viewBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                editBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                deleteBus(busId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'busSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#busTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n    });\n    \n    function loadRoutes() {\n        // This would be replaced with an actual API call\n        fetch(\'/api/routes\')\n            .then(response => response.json())\n            .then(routes => {\n                const routeSelect = document.getElementById(\'routeSelect\');\n                \n                routes.forEach(route => {\n                    const option = document.createElement(\'option\');\n                    option.value = route.id;\n                    option.textContent = `${route.route_number} - ${route.name}`;\n                    routeSelect.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading routes:\', error);\n            });\n    }\n    \n    function saveBus() {\n        // Get form values\n        const busNumber = document.getElementById(\'busNumber\').value;\n        const licensePlate = document.getElementById(\'licensePlate\').value;\n        const capacity = document.getElementById(\'capacity\').value;\n        const routeId = document.getElementById(\'routeSelect\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // This would be replaced with an actual API call\n        const busData = {\n            bus_number: busNumber,\n            license_plate: licensePlate,\n            capacity: parseInt(capacity),\n            current_route_id: routeId || null,\n            is_active: isActive\n        };\n        \n        console.log(\'Bus data to save:\', busData);\n        alert(\'Bus added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addBusModal\'));\n        modal.hide();\n        document.getElementById(\'addBusForm\').reset();\n        \n        // In a real application, we would refresh the bus list or add the new bus to the table\n    }\n    \n    function viewBus(busId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/bus/${busId}`)\n            .then(response => response.json())\n            .then(bus => {\n                // Populate the view modal with bus details\n                document.getElementById(\'viewBusNumber\').textContent = bus.bus_number;\n                document.getElementById(\'viewLicensePlate\').textContent = bus.license_plate;\n                document.getElementById(\'viewCapacity\').textContent = bus.capacity || \'50\';\n                \n                // Set status badge\n                const statusElement = document.getElementById(\'viewStatus\');\n                if (bus.is_active) {\n                    statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                } else {\n                    statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                }\n                \n                // Set coordinates and last updated\n                if (bus.latitude && bus.longitude) {\n                    document.getElementById(\'viewCoordinates\').textContent = \n                        `${bus.latitude.toFixed(4)}, ${bus.longitude.toFixed(4)}`;\n                    \n                    // Initialize the small map\n                    const map = L.map(\'viewBusMap\').setView([bus.latitude, bus.longitude], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    // Add bus marker\n                    L.marker([bus.latitude, bus.longitude]).addTo(map);\n                } else {\n                    document.getElementById(\'viewCoordinates\').textContent = \'Unknown\';\n                    document.getElementById(\'viewBusMap\').innerHTML = \n                        \'<div class="alert alert-info">No location data available</div>\';\n                }\n                \n                document.getElementById(\'viewLastUpdated\').textContent = \n                    bus.last_updated ? new Date(bus.last_updated).toLocaleString() : \'Never\';\n                \n                // Set route info\n                if (bus.route) {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        `<strong>Current Route:</strong> ${bus.route.route_number} - ${bus.route.name}`;\n                } else {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        \'<div class="alert alert-warning">No route assigned</div>\';\n                }\n                \n                // Populate stops table with ETAs\n                const stopsTable = document.getElementById(\'viewStopsTable\');\n                stopsTable.innerHTML = \'\';\n                \n                if (bus.eta_predictions && bus.eta_predictions.length > 0) {\n                    bus.eta_predictions.forEach(eta => {\n                        const row = document.createElement(\'tr\');\n                        \n                        // Stop name\n                        const stopCell = document.createElement(\'td\');\n                        stopCell.textContent = eta.stop_name;\n                        \n                        // ETA time\n                        const etaCell = document.createElement(\'td\');\n                        const etaTime = new Date(eta.predicted_arrival);\n                        etaCell.textContent = etaTime.toLocaleTimeString();\n                        \n                        // Status\n                        const statusCell = document.createElement(\'td\');\n                        if (eta.is_delayed) {\n                            statusCell.innerHTML = `<span class="badge bg-warning text-dark">Delayed by ${eta.delay_minutes} min</span>`;\n                        } else {\n                            statusCell.innerHTML = `<span class="badge bg-success">On Time</span>`;\n                        }\n                        \n                        row.appendChild(stopCell);\n                        row.appendChild(etaCell);\n                        row.appendChild(statusCell);\n                        stopsTable.appendChild(row);\n                    });\n                } else {\n                    const row = document.createElement(\'tr\');\n                    const cell = document.createElement(\'td\');\n                    cell.setAttribute(\'colspan\', \'3\');\n                    cell.classList.add(\'text-center\');\n                    cell.textContent = \'No ETA predictions available\';\n                    row.appendChild(cell);\n                    stopsTable.appendChild(row);\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewBusModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching bus details:\', error);\n                alert(\'Failed to load bus details\');\n            });\n    }\n    \n    function editBus(busId) {\n        // In a real application, this would fetch the bus data and populate the edit form\n        alert(`Edit bus ${busId} (not implemented in this demo)`);\n    }\n    \n    function deleteBus(busId) {\n        // In a real application, this would show a confirmation dialog and then delete the bus\n        if (confirm(`Are you sure you want to delete bus with ID ${busId}?`)) {\n            alert(`Bus ${busId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Load routes for the dropdown\n        loadRoutes();\n        \n        // Set up event listeners\n        document.getElementById(\'saveBusBtn\').addEventListener(\'click\', saveBus);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                viewBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                editBus(busId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-bus\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const busId = this.getAttribute(\'data-bus-id\');\n                deleteBus(busId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'busSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#busTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n    });\n    \n    function loadRoutes() {\n        // This would be replaced with an actual API call\n        fetch(\'/api/routes\')\n            .then(response => response.json())\n            .then(routes => {\n                const routeSelect = document.getElementById(\'routeSelect\');\n                \n                routes.forEach(route => {\n                    const option = document.createElement(\'option\');\n                    option.value = route.id;\n                    option.textContent = `${route.route_number} - ${route.name}`;\n                    routeSelect.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading routes:\', error);\n            });\n    }\n    \n    function saveBus() {\n        // Get form values\n        const busNumber = document.getElementById(\'busNumber\').value;\n        const licensePlate = document.getElementById(\'licensePlate\').value;\n        const capacity = document.getElementById(\'capacity\').value;\n        const routeId = document.getElementById(\'routeSelect\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // This would be replaced with an actual API call\n        const busData = {\n            bus_number: busNumber,\n            license_plate: licensePlate,\n            capacity: parseInt(capacity),\n            current_route_id: routeId || null,\n            is_active: isActive\n        };\n        \n        console.log(\'Bus data to save:\', busData);\n        alert(\'Bus added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addBusModal\'));\n        modal.hide();\n        document.getElementById(\'addBusForm\').reset();\n        \n        // In a real application, we would refresh the bus list or add the new bus to the table\n    }\n    \n    function viewBus(busId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/bus/${busId}`)\n            .then(response => response.json())\n            .then(bus => {\n                // Populate the view modal with bus details\n                document.getElementById(\'viewBusNumber\').textContent = bus.bus_number;\n                document.getElementById(\'viewLicensePlate\').textContent = bus.license_plate;\n                document.getElementById(\'viewCapacity\').textContent = bus.capacity || \'50\';\n                \n                // Set status badge\n                const statusElement = document.getElementById(\'viewStatus\');\n                if (bus.is_active) {\n                    statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                } else {\n                    statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                }\n                \n                // Set coordinates and last updated\n                if (bus.latitude && bus.longitude) {\n                    document.getElementById(\'viewCoordinates\').textContent = \n                        `${bus.latitude.toFixed(4)}, ${bus.longitude.toFixed(4)}`;\n                    \n                    // Initialize the small map\n                    const map = L.map(\'viewBusMap\').setView([bus.latitude, bus.longitude], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    // Add bus marker\n                    L.marker([bus.latitude, bus.longitude]).addTo(map);\n                } else {\n                    document.getElementById(\'viewCoordinates\').textContent = \'Unknown\';\n                    document.getElementById(\'viewBusMap\').innerHTML = \n                        \'<div class="alert alert-info">No location data available</div>\';\n                }\n                \n                document.getElementById(\'viewLastUpdated\').textContent = \n                    bus.last_updated ? new Date(bus.last_updated).toLocaleString() : \'Never\';\n                \n                // Set route info\n                if (bus.route) {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        `<strong>Current Route:</strong> ${bus.route.route_number} - ${bus.route.name}`;\n                } else {\n                    document.getElementById(\'viewRouteInfo\').innerHTML = \n                        \'<div class="alert alert-warning">No route assigned</div>\';\n                }\n                \n                // Populate stops table with ETAs\n                const stopsTable = document.getElementById(\'viewStopsTable\');\n                stopsTable.innerHTML = \'\';\n                \n                if (bus.eta_predictions && bus.eta_predictions.length > 0) {\n                    bus.eta_predictions.forEach(eta => {\n                        const row = document.createElement(\'tr\');\n                        \n                        // Stop name\n                        const stopCell = document.createElement(\'td\');\n                        stopCell.textContent = eta.stop_name;\n                        \n                        // ETA time\n                        const etaCell = document.createElement(\'td\');\n                        const etaTime = new Date(eta.predicted_arrival);\n                        etaCell.textContent = etaTime.toLocaleTimeString();\n                        \n                        // Status\n                        const statusCell = document.createElement(\'td\');\n                        if (eta.is_delayed) {\n                            statusCell.innerHTML = `<span class="badge bg-warning text-dark">Delayed by ${eta.delay_minutes} min</span>`;\n                        } else {\n                            statusCell.innerHTML = `<span class="badge bg-success">On Time</span>`;\n                        }\n                        \n                        row.appendChild(stopCell);\n                        row.appendChild(etaCell);\n                        row.appendChild(statusCell);\n                        stopsTable.appendChild(row);\n                    });\n                } else {\n                    const row = document.createElement(\'tr\');\n                    const cell = document.createElement(\'td\');\n                    cell.setAttribute(\'colspan\', \'3\');\n                    cell.classList.add(\'text-center\');\n                    cell.textContent = \'No ETA predictions available\';\n                    row.appendChild(cell);\n                    stopsTable.appendChild(row);\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewBusModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching bus details:\', error);\n                alert(\'Failed to load bus details\');\n            });\n    }\n    \n    function editBus(busId) {\n        // In a real application, this would fetch the bus data and populate the edit form\n        alert(`Edit bus ${busId} (not implemented in this demo)`);\n    }\n    \n    function deleteBus(busId) {\n        // In a real application, this would show a confirmation dialog and then delete the bus\n        if (confirm(`Are you sure you want to delete bus with ID ${busId}?`)) {\n            alert(`Bus ${busId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/buses.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = a03216499a707e3c276a48d9b6d8878c828dfc3e36e50367ff2bbb60d35734f7105ac15cb4281000cbe7b2ccfddc77f9507015193fa66878d4279e5cf680797a_0
2025-05-25 18:29:08,486 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/index.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = f4aa0135e5d07f1058e1929ae070180b54ffec92eb732e0a24b27d5223b73f4d3b52fc32026c376bb9de5378ecaac77fe1da9750a32af7046f37d33919b23d5c_0
2025-05-25 18:29:08,487 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/index.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5f90ab8acddd27ffb6a7f259e0a236aa3f1fee76d13e8cc84f63403ff2a56105bddc6e7faf03a3fdc1a93a9a79130d84a989556aabd2f8e6649e5cd5b297178c_0
2025-05-25 18:29:08,487 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/index.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5f90ab8acddd27ffb6a7f259e0a236aa3f1fee76d13e8cc84f63403ff2a56105bddc6e7faf03a3fdc1a93a9a79130d84a989556aabd2f8e6649e5cd5b297178c_0
2025-05-25 18:29:08,487 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/index.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5f90ab8acddd27ffb6a7f259e0a236aa3f1fee76d13e8cc84f63403ff2a56105bddc6e7faf03a3fdc1a93a9a79130d84a989556aabd2f8e6649e5cd5b297178c_0
2025-05-25 18:29:08,488 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/index.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = f4aa0135e5d07f1058e1929ae070180b54ffec92eb732e0a24b27d5223b73f4d3b52fc32026c376bb9de5378ecaac77fe1da9750a32af7046f37d33919b23d5c_0
2025-05-25 18:29:08,488 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/index.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5f90ab8acddd27ffb6a7f259e0a236aa3f1fee76d13e8cc84f63403ff2a56105bddc6e7faf03a3fdc1a93a9a79130d84a989556aabd2f8e6649e5cd5b297178c_0
2025-05-25 18:29:08,489 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/index.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5f90ab8acddd27ffb6a7f259e0a236aa3f1fee76d13e8cc84f63403ff2a56105bddc6e7faf03a3fdc1a93a9a79130d84a989556aabd2f8e6649e5cd5b297178c_0
2025-05-25 18:29:08,489 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/index.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5f90ab8acddd27ffb6a7f259e0a236aa3f1fee76d13e8cc84f63403ff2a56105bddc6e7faf03a3fdc1a93a9a79130d84a989556aabd2f8e6649e5cd5b297178c_1
2025-05-25 18:29:08,493 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/routes.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 600cf4bdc35a02c34bc573e754c057b22dc6b222b236aaf7396b6cd8997f71b81cc0ea34869a32f23568b64cceb3c92a37f9a315f5d95eeff2d039188f86e23e_0
2025-05-25 18:29:08,497 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize maps for each route\n        {% if routes %}\n            {% for route in routes %}\n                initRouteMap(\'map-{{ route.id }}\', {{ route.id }});\n            {% endfor %}\n        {% endif %}\n        \n        // Set up event listeners for add/edit/delete buttons\n        document.getElementById(\'saveRouteBtn\').addEventListener(\'click\', saveRoute);\n        document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                viewRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                editRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                deleteRoute(routeId);\n            });\n        });\n    });\n    \n    function initRouteMap(elementId, routeId) {\n        // Create a map for the route card\n        const map = L.map(elementId).setView([51.505, -0.09], 13); // Default view\n        \n        // Add OpenStreetMap tiles\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(map);\n        \n        // In a real application, we would load the route path and stops from an API\n        // For now, we\'ll just simulate it with fetch\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route && route.stops && route.stops.length > 0) {\n                    const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                    \n                    // Create a polyline for the route\n                    const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                    \n                    // Add markers for each stop\n                    route.stops.forEach(stop => {\n                        L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(stop.name)\n                            .addTo(map);\n                    });\n                    \n                    // Fit the map to show the entire route\n                    map.fitBounds(routeLine.getBounds());\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading route data:\', error);\n                // Show error on map\n                const errorMsg = L.divIcon({\n                    html: \'<div class="alert alert-warning">Error loading route data</div>\',\n                    className: \'map-error\',\n                    iconSize: [200, 50]\n                });\n                L.marker([51.505, -0.09], {icon: errorMsg}).addTo(map);\n            });\n    }\n    \n    function addStopRow() {\n        const tbody = document.querySelector(\'#stopsTable tbody\');\n        \n        // Remove the "no stops" message if present\n        if (tbody.querySelector(\'td[colspan="5"]\')) {\n            tbody.innerHTML = \'\';\n        }\n        \n        // Get current number of stops\n        const stopCount = tbody.querySelectorAll(\'tr\').length + 1;\n        \n        // Create new row\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n            <td>${stopCount}</td>\n            <td>\n                <select class="form-select form-select-sm" required>\n                    <option value="">Select Stop</option>\n                    <!-- Stops will be loaded dynamically -->\n                </select>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <button type="button" class="btn btn-sm btn-danger remove-stop">\n                    <i class="fas fa-times"></i>\n                </button>\n            </td>\n        `;\n        \n        // Add event listener to the remove button\n        row.querySelector(\'.remove-stop\').addEventListener(\'click\', function() {\n            row.remove();\n            \n            // Reindex the stops\n            const rows = tbody.querySelectorAll(\'tr\');\n            if (rows.length === 0) {\n                // Add "no stops" message back\n                tbody.innerHTML = `\n                    <tr>\n                        <td colspan="5" class="text-center py-3">\n                            <p class="text-muted mb-2">No stops added yet</p>\n                            <button type="button" class="btn btn-sm btn-outline-primary" id="addStopBtn">\n                                <i class="fas fa-plus me-1"></i> Add Stop\n                            </button>\n                        </td>\n                    </tr>\n                `;\n                document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n            } else {\n                rows.forEach((row, index) => {\n                    row.querySelector(\'td:first-child\').textContent = index + 1;\n                });\n            }\n        });\n        \n        // Add the row to the table\n        tbody.appendChild(row);\n        \n        // Load stops for the dropdown\n        const select = row.querySelector(\'select\');\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                stops.forEach(stop => {\n                    const option = document.createElement(\'option\');\n                    option.value = stop.id;\n                    option.textContent = stop.name;\n                    select.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n            });\n    }\n    \n    function saveRoute() {\n        // Get form values\n        const routeNumber = document.getElementById(\'routeNumber\').value;\n        const routeName = document.getElementById(\'routeName\').value;\n        const routeDescription = document.getElementById(\'routeDescription\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Get stops\n        const stops = [];\n        const stopRows = document.querySelectorAll(\'#stopsTable tbody tr\');\n        \n        stopRows.forEach((row, index) => {\n            // Skip the "no stops" row\n            if (row.querySelector(\'td[colspan="5"]\')) {\n                return;\n            }\n            \n            const stopId = row.querySelector(\'select\').value;\n            const arrivalTime = row.querySelector(\'input[type="time"]:nth-of-type(1)\').value;\n            const departureTime = row.querySelector(\'input[type="time"]:nth-of-type(2)\').value;\n            \n            stops.push({\n                stop_id: stopId,\n                sequence: index + 1,\n                scheduled_arrival: arrivalTime,\n                scheduled_departure: departureTime\n            });\n        });\n        \n        // Build the route data\n        const routeData = {\n            route_number: routeNumber,\n            name: routeName,\n            description: routeDescription,\n            is_active: isActive,\n            stops: stops\n        };\n        \n        console.log(\'Route data to save:\', routeData);\n        alert(\'Route added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addRouteModal\'));\n        modal.hide();\n        document.getElementById(\'addRouteForm\').reset();\n        \n        // In a real application, we would refresh the routes list or add the new route to the page\n    }\n    \n    function viewRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the view modal\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route) {\n                    // Set basic route info\n                    document.getElementById(\'viewRouteNumber\').textContent = route.route_number;\n                    document.getElementById(\'viewRouteName\').textContent = route.name;\n                    document.getElementById(\'viewRouteDescription\').textContent = route.description || \'No description provided\';\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewRouteStatus\');\n                    if (route.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the route map\n                    const map = L.map(\'viewRouteMap\').setView([51.505, -0.09], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    if (route.stops && route.stops.length > 0) {\n                        const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                        \n                        // Create a polyline for the route\n                        const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                        \n                        // Add markers for each stop\n                        route.stops.forEach(stop => {\n                            L.marker([stop.latitude, stop.longitude])\n                                .bindTooltip(stop.name)\n                                .addTo(map);\n                        });\n                        \n                        // Fit the map to show the entire route\n                        map.fitBounds(routeLine.getBounds());\n                        \n                        // Populate stops table\n                        const stopsTable = document.getElementById(\'viewStopsTable\');\n                        stopsTable.innerHTML = \'\';\n                        \n                        route.stops.forEach(stop => {\n                            const row = document.createElement(\'tr\');\n                            row.innerHTML = `\n                                <td>${stop.sequence}</td>\n                                <td>${stop.name}</td>\n                                <td>${stop.scheduled_arrival || \'N/A\'}</td>\n                                <td>${stop.scheduled_departure || \'N/A\'}</td>\n                                <td>${stop.latitude.toFixed(4)}, ${stop.longitude.toFixed(4)}</td>\n                            `;\n                            stopsTable.appendChild(row);\n                        });\n                    } else {\n                        document.getElementById(\'viewStopsTable\').innerHTML = `\n                            <tr>\n                                <td colspan="5" class="text-center">No stops defined for this route</td>\n                            </tr>\n                        `;\n                    }\n                    \n                    // Load active buses for this route\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            const activeBuses = buses.filter(bus => bus.route_id == routeId);\n                            const busesList = document.getElementById(\'viewActiveBuses\');\n                            \n                            if (activeBuses.length > 0) {\n                                busesList.innerHTML = \'\';\n                                activeBuses.forEach(bus => {\n                                    // Add bus to the list\n                                    const listItem = document.createElement(\'li\');\n                                    listItem.className = \'list-group-item d-flex justify-content-between align-items-center\';\n                                    listItem.innerHTML = `\n                                        <span>Bus ${bus.bus_number}</span>\n                                        <button class="btn btn-sm btn-outline-primary view-bus-btn" data-bus-id="${bus.id}">\n                                            View\n                                        </button>\n                                    `;\n                                    busesList.appendChild(listItem);\n                                    \n                                    // Add bus to the map\n                                    if (bus.latitude && bus.longitude) {\n                                        const busIcon = L.divIcon({\n                                            html: `<i class="fas fa-bus"></i>`,\n                                            className: \'bus-icon\',\n                                            iconSize: [20, 20]\n                                        });\n                                        \n                                        L.marker([bus.latitude, bus.longitude], {icon: busIcon})\n                                            .bindTooltip(`Bus ${bus.bus_number}`)\n                                            .addTo(map);\n                                    }\n                                });\n                            } else {\n                                busesList.innerHTML = `\n                                    <li class="list-group-item text-center">\n                                        No buses currently on this route\n                                    </li>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses:\', error);\n                            document.getElementById(\'viewActiveBuses\').innerHTML = `\n                                <li class="list-group-item text-danger">\n                                    Error loading active buses\n                                </li>\n                            `;\n                        });\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewRouteModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching route details:\', error);\n                alert(\'Failed to load route details\');\n            });\n    }\n    \n    function editRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the edit form\n        alert(`Edit route ${routeId} (not implemented in this demo)`);\n    }\n    \n    function deleteRoute(routeId) {\n        // In a real application, this would show a confirmation dialog and then delete the route\n        if (confirm(`Are you sure you want to delete route with ID ${routeId}?`)) {\n            alert(`Route ${routeId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize maps for each route\n        {% if routes %}\n            {% for route in routes %}\n                initRouteMap(\'map-{{ route.id }}\', {{ route.id }});\n            {% endfor %}\n        {% endif %}\n        \n        // Set up event listeners for add/edit/delete buttons\n        document.getElementById(\'saveRouteBtn\').addEventListener(\'click\', saveRoute);\n        document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                viewRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                editRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                deleteRoute(routeId);\n            });\n        });\n    });\n    \n    function initRouteMap(elementId, routeId) {\n        // Create a map for the route card\n        const map = L.map(elementId).setView([51.505, -0.09], 13); // Default view\n        \n        // Add OpenStreetMap tiles\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(map);\n        \n        // In a real application, we would load the route path and stops from an API\n        // For now, we\'ll just simulate it with fetch\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route && route.stops && route.stops.length > 0) {\n                    const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                    \n                    // Create a polyline for the route\n                    const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                    \n                    // Add markers for each stop\n                    route.stops.forEach(stop => {\n                        L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(stop.name)\n                            .addTo(map);\n                    });\n                    \n                    // Fit the map to show the entire route\n                    map.fitBounds(routeLine.getBounds());\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading route data:\', error);\n                // Show error on map\n                const errorMsg = L.divIcon({\n                    html: \'<div class="alert alert-warning">Error loading route data</div>\',\n                    className: \'map-error\',\n                    iconSize: [200, 50]\n                });\n                L.marker([51.505, -0.09], {icon: errorMsg}).addTo(map);\n            });\n    }\n    \n    function addStopRow() {\n        const tbody = document.querySelector(\'#stopsTable tbody\');\n        \n        // Remove the "no stops" message if present\n        if (tbody.querySelector(\'td[colspan="5"]\')) {\n            tbody.innerHTML = \'\';\n        }\n        \n        // Get current number of stops\n        const stopCount = tbody.querySelectorAll(\'tr\').length + 1;\n        \n        // Create new row\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n            <td>${stopCount}</td>\n            <td>\n                <select class="form-select form-select-sm" required>\n                    <option value="">Select Stop</option>\n                    <!-- Stops will be loaded dynamically -->\n                </select>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <button type="button" class="btn btn-sm btn-danger remove-stop">\n                    <i class="fas fa-times"></i>\n                </button>\n            </td>\n        `;\n        \n        // Add event listener to the remove button\n        row.querySelector(\'.remove-stop\').addEventListener(\'click\', function() {\n            row.remove();\n            \n            // Reindex the stops\n            const rows = tbody.querySelectorAll(\'tr\');\n            if (rows.length === 0) {\n                // Add "no stops" message back\n                tbody.innerHTML = `\n                    <tr>\n                        <td colspan="5" class="text-center py-3">\n                            <p class="text-muted mb-2">No stops added yet</p>\n                            <button type="button" class="btn btn-sm btn-outline-primary" id="addStopBtn">\n                                <i class="fas fa-plus me-1"></i> Add Stop\n                            </button>\n                        </td>\n                    </tr>\n                `;\n                document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n            } else {\n                rows.forEach((row, index) => {\n                    row.querySelector(\'td:first-child\').textContent = index + 1;\n                });\n            }\n        });\n        \n        // Add the row to the table\n        tbody.appendChild(row);\n        \n        // Load stops for the dropdown\n        const select = row.querySelector(\'select\');\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                stops.forEach(stop => {\n                    const option = document.createElement(\'option\');\n                    option.value = stop.id;\n                    option.textContent = stop.name;\n                    select.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n            });\n    }\n    \n    function saveRoute() {\n        // Get form values\n        const routeNumber = document.getElementById(\'routeNumber\').value;\n        const routeName = document.getElementById(\'routeName\').value;\n        const routeDescription = document.getElementById(\'routeDescription\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Get stops\n        const stops = [];\n        const stopRows = document.querySelectorAll(\'#stopsTable tbody tr\');\n        \n        stopRows.forEach((row, index) => {\n            // Skip the "no stops" row\n            if (row.querySelector(\'td[colspan="5"]\')) {\n                return;\n            }\n            \n            const stopId = row.querySelector(\'select\').value;\n            const arrivalTime = row.querySelector(\'input[type="time"]:nth-of-type(1)\').value;\n            const departureTime = row.querySelector(\'input[type="time"]:nth-of-type(2)\').value;\n            \n            stops.push({\n                stop_id: stopId,\n                sequence: index + 1,\n                scheduled_arrival: arrivalTime,\n                scheduled_departure: departureTime\n            });\n        });\n        \n        // Build the route data\n        const routeData = {\n            route_number: routeNumber,\n            name: routeName,\n            description: routeDescription,\n            is_active: isActive,\n            stops: stops\n        };\n        \n        console.log(\'Route data to save:\', routeData);\n        alert(\'Route added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addRouteModal\'));\n        modal.hide();\n        document.getElementById(\'addRouteForm\').reset();\n        \n        // In a real application, we would refresh the routes list or add the new route to the page\n    }\n    \n    function viewRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the view modal\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route) {\n                    // Set basic route info\n                    document.getElementById(\'viewRouteNumber\').textContent = route.route_number;\n                    document.getElementById(\'viewRouteName\').textContent = route.name;\n                    document.getElementById(\'viewRouteDescription\').textContent = route.description || \'No description provided\';\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewRouteStatus\');\n                    if (route.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the route map\n                    const map = L.map(\'viewRouteMap\').setView([51.505, -0.09], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    if (route.stops && route.stops.length > 0) {\n                        const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                        \n                        // Create a polyline for the route\n                        const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                        \n                        // Add markers for each stop\n                        route.stops.forEach(stop => {\n                            L.marker([stop.latitude, stop.longitude])\n                                .bindTooltip(stop.name)\n                                .addTo(map);\n                        });\n                        \n                        // Fit the map to show the entire route\n                        map.fitBounds(routeLine.getBounds());\n                        \n                        // Populate stops table\n                        const stopsTable = document.getElementById(\'viewStopsTable\');\n                        stopsTable.innerHTML = \'\';\n                        \n                        route.stops.forEach(stop => {\n                            const row = document.createElement(\'tr\');\n                            row.innerHTML = `\n                                <td>${stop.sequence}</td>\n                                <td>${stop.name}</td>\n                                <td>${stop.scheduled_arrival || \'N/A\'}</td>\n                                <td>${stop.scheduled_departure || \'N/A\'}</td>\n                                <td>${stop.latitude.toFixed(4)}, ${stop.longitude.toFixed(4)}</td>\n                            `;\n                            stopsTable.appendChild(row);\n                        });\n                    } else {\n                        document.getElementById(\'viewStopsTable\').innerHTML = `\n                            <tr>\n                                <td colspan="5" class="text-center">No stops defined for this route</td>\n                            </tr>\n                        `;\n                    }\n                    \n                    // Load active buses for this route\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            const activeBuses = buses.filter(bus => bus.route_id == routeId);\n                            const busesList = document.getElementById(\'viewActiveBuses\');\n                            \n                            if (activeBuses.length > 0) {\n                                busesList.innerHTML = \'\';\n                                activeBuses.forEach(bus => {\n                                    // Add bus to the list\n                                    const listItem = document.createElement(\'li\');\n                                    listItem.className = \'list-group-item d-flex justify-content-between align-items-center\';\n                                    listItem.innerHTML = `\n                                        <span>Bus ${bus.bus_number}</span>\n                                        <button class="btn btn-sm btn-outline-primary view-bus-btn" data-bus-id="${bus.id}">\n                                            View\n                                        </button>\n                                    `;\n                                    busesList.appendChild(listItem);\n                                    \n                                    // Add bus to the map\n                                    if (bus.latitude && bus.longitude) {\n                                        const busIcon = L.divIcon({\n                                            html: `<i class="fas fa-bus"></i>`,\n                                            className: \'bus-icon\',\n                                            iconSize: [20, 20]\n                                        });\n                                        \n                                        L.marker([bus.latitude, bus.longitude], {icon: busIcon})\n                                            .bindTooltip(`Bus ${bus.bus_number}`)\n                                            .addTo(map);\n                                    }\n                                });\n                            } else {\n                                busesList.innerHTML = `\n                                    <li class="list-group-item text-center">\n                                        No buses currently on this route\n                                    </li>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses:\', error);\n                            document.getElementById(\'viewActiveBuses\').innerHTML = `\n                                <li class="list-group-item text-danger">\n                                    Error loading active buses\n                                </li>\n                            `;\n                        });\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewRouteModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching route details:\', error);\n                alert(\'Failed to load route details\');\n            });\n    }\n    \n    function editRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the edit form\n        alert(`Edit route ${routeId} (not implemented in this demo)`);\n    }\n    \n    function deleteRoute(routeId) {\n        // In a real application, this would show a confirmation dialog and then delete the route\n        if (confirm(`Are you sure you want to delete route with ID ${routeId}?`)) {\n            alert(`Route ${routeId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/routes.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d6f2bbeee3bb0aaf98e87dcecf8947b462aaeb0f84715331c5f66a0f29d9a981e00d4b20b0be1235eb29ab897af2ebfa09a4d14ba0d1a0763523c57dc76b8175_0
2025-05-25 18:29:08,500 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize maps for each route\n        {% if routes %}\n            {% for route in routes %}\n                initRouteMap(\'map-{{ route.id }}\', {{ route.id }});\n            {% endfor %}\n        {% endif %}\n        \n        // Set up event listeners for add/edit/delete buttons\n        document.getElementById(\'saveRouteBtn\').addEventListener(\'click\', saveRoute);\n        document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                viewRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                editRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                deleteRoute(routeId);\n            });\n        });\n    });\n    \n    function initRouteMap(elementId, routeId) {\n        // Create a map for the route card\n        const map = L.map(elementId).setView([51.505, -0.09], 13); // Default view\n        \n        // Add OpenStreetMap tiles\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(map);\n        \n        // In a real application, we would load the route path and stops from an API\n        // For now, we\'ll just simulate it with fetch\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route && route.stops && route.stops.length > 0) {\n                    const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                    \n                    // Create a polyline for the route\n                    const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                    \n                    // Add markers for each stop\n                    route.stops.forEach(stop => {\n                        L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(stop.name)\n                            .addTo(map);\n                    });\n                    \n                    // Fit the map to show the entire route\n                    map.fitBounds(routeLine.getBounds());\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading route data:\', error);\n                // Show error on map\n                const errorMsg = L.divIcon({\n                    html: \'<div class="alert alert-warning">Error loading route data</div>\',\n                    className: \'map-error\',\n                    iconSize: [200, 50]\n                });\n                L.marker([51.505, -0.09], {icon: errorMsg}).addTo(map);\n            });\n    }\n    \n    function addStopRow() {\n        const tbody = document.querySelector(\'#stopsTable tbody\');\n        \n        // Remove the "no stops" message if present\n        if (tbody.querySelector(\'td[colspan="5"]\')) {\n            tbody.innerHTML = \'\';\n        }\n        \n        // Get current number of stops\n        const stopCount = tbody.querySelectorAll(\'tr\').length + 1;\n        \n        // Create new row\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n            <td>${stopCount}</td>\n            <td>\n                <select class="form-select form-select-sm" required>\n                    <option value="">Select Stop</option>\n                    <!-- Stops will be loaded dynamically -->\n                </select>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <button type="button" class="btn btn-sm btn-danger remove-stop">\n                    <i class="fas fa-times"></i>\n                </button>\n            </td>\n        `;\n        \n        // Add event listener to the remove button\n        row.querySelector(\'.remove-stop\').addEventListener(\'click\', function() {\n            row.remove();\n            \n            // Reindex the stops\n            const rows = tbody.querySelectorAll(\'tr\');\n            if (rows.length === 0) {\n                // Add "no stops" message back\n                tbody.innerHTML = `\n                    <tr>\n                        <td colspan="5" class="text-center py-3">\n                            <p class="text-muted mb-2">No stops added yet</p>\n                            <button type="button" class="btn btn-sm btn-outline-primary" id="addStopBtn">\n                                <i class="fas fa-plus me-1"></i> Add Stop\n                            </button>\n                        </td>\n                    </tr>\n                `;\n                document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n            } else {\n                rows.forEach((row, index) => {\n                    row.querySelector(\'td:first-child\').textContent = index + 1;\n                });\n            }\n        });\n        \n        // Add the row to the table\n        tbody.appendChild(row);\n        \n        // Load stops for the dropdown\n        const select = row.querySelector(\'select\');\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                stops.forEach(stop => {\n                    const option = document.createElement(\'option\');\n                    option.value = stop.id;\n                    option.textContent = stop.name;\n                    select.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n            });\n    }\n    \n    function saveRoute() {\n        // Get form values\n        const routeNumber = document.getElementById(\'routeNumber\').value;\n        const routeName = document.getElementById(\'routeName\').value;\n        const routeDescription = document.getElementById(\'routeDescription\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Get stops\n        const stops = [];\n        const stopRows = document.querySelectorAll(\'#stopsTable tbody tr\');\n        \n        stopRows.forEach((row, index) => {\n            // Skip the "no stops" row\n            if (row.querySelector(\'td[colspan="5"]\')) {\n                return;\n            }\n            \n            const stopId = row.querySelector(\'select\').value;\n            const arrivalTime = row.querySelector(\'input[type="time"]:nth-of-type(1)\').value;\n            const departureTime = row.querySelector(\'input[type="time"]:nth-of-type(2)\').value;\n            \n            stops.push({\n                stop_id: stopId,\n                sequence: index + 1,\n                scheduled_arrival: arrivalTime,\n                scheduled_departure: departureTime\n            });\n        });\n        \n        // Build the route data\n        const routeData = {\n            route_number: routeNumber,\n            name: routeName,\n            description: routeDescription,\n            is_active: isActive,\n            stops: stops\n        };\n        \n        console.log(\'Route data to save:\', routeData);\n        alert(\'Route added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addRouteModal\'));\n        modal.hide();\n        document.getElementById(\'addRouteForm\').reset();\n        \n        // In a real application, we would refresh the routes list or add the new route to the page\n    }\n    \n    function viewRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the view modal\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route) {\n                    // Set basic route info\n                    document.getElementById(\'viewRouteNumber\').textContent = route.route_number;\n                    document.getElementById(\'viewRouteName\').textContent = route.name;\n                    document.getElementById(\'viewRouteDescription\').textContent = route.description || \'No description provided\';\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewRouteStatus\');\n                    if (route.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the route map\n                    const map = L.map(\'viewRouteMap\').setView([51.505, -0.09], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    if (route.stops && route.stops.length > 0) {\n                        const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                        \n                        // Create a polyline for the route\n                        const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                        \n                        // Add markers for each stop\n                        route.stops.forEach(stop => {\n                            L.marker([stop.latitude, stop.longitude])\n                                .bindTooltip(stop.name)\n                                .addTo(map);\n                        });\n                        \n                        // Fit the map to show the entire route\n                        map.fitBounds(routeLine.getBounds());\n                        \n                        // Populate stops table\n                        const stopsTable = document.getElementById(\'viewStopsTable\');\n                        stopsTable.innerHTML = \'\';\n                        \n                        route.stops.forEach(stop => {\n                            const row = document.createElement(\'tr\');\n                            row.innerHTML = `\n                                <td>${stop.sequence}</td>\n                                <td>${stop.name}</td>\n                                <td>${stop.scheduled_arrival || \'N/A\'}</td>\n                                <td>${stop.scheduled_departure || \'N/A\'}</td>\n                                <td>${stop.latitude.toFixed(4)}, ${stop.longitude.toFixed(4)}</td>\n                            `;\n                            stopsTable.appendChild(row);\n                        });\n                    } else {\n                        document.getElementById(\'viewStopsTable\').innerHTML = `\n                            <tr>\n                                <td colspan="5" class="text-center">No stops defined for this route</td>\n                            </tr>\n                        `;\n                    }\n                    \n                    // Load active buses for this route\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            const activeBuses = buses.filter(bus => bus.route_id == routeId);\n                            const busesList = document.getElementById(\'viewActiveBuses\');\n                            \n                            if (activeBuses.length > 0) {\n                                busesList.innerHTML = \'\';\n                                activeBuses.forEach(bus => {\n                                    // Add bus to the list\n                                    const listItem = document.createElement(\'li\');\n                                    listItem.className = \'list-group-item d-flex justify-content-between align-items-center\';\n                                    listItem.innerHTML = `\n                                        <span>Bus ${bus.bus_number}</span>\n                                        <button class="btn btn-sm btn-outline-primary view-bus-btn" data-bus-id="${bus.id}">\n                                            View\n                                        </button>\n                                    `;\n                                    busesList.appendChild(listItem);\n                                    \n                                    // Add bus to the map\n                                    if (bus.latitude && bus.longitude) {\n                                        const busIcon = L.divIcon({\n                                            html: `<i class="fas fa-bus"></i>`,\n                                            className: \'bus-icon\',\n                                            iconSize: [20, 20]\n                                        });\n                                        \n                                        L.marker([bus.latitude, bus.longitude], {icon: busIcon})\n                                            .bindTooltip(`Bus ${bus.bus_number}`)\n                                            .addTo(map);\n                                    }\n                                });\n                            } else {\n                                busesList.innerHTML = `\n                                    <li class="list-group-item text-center">\n                                        No buses currently on this route\n                                    </li>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses:\', error);\n                            document.getElementById(\'viewActiveBuses\').innerHTML = `\n                                <li class="list-group-item text-danger">\n                                    Error loading active buses\n                                </li>\n                            `;\n                        });\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewRouteModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching route details:\', error);\n                alert(\'Failed to load route details\');\n            });\n    }\n    \n    function editRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the edit form\n        alert(`Edit route ${routeId} (not implemented in this demo)`);\n    }\n    \n    function deleteRoute(routeId) {\n        // In a real application, this would show a confirmation dialog and then delete the route\n        if (confirm(`Are you sure you want to delete route with ID ${routeId}?`)) {\n            alert(`Route ${routeId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize maps for each route\n        {% if routes %}\n            {% for route in routes %}\n                initRouteMap(\'map-{{ route.id }}\', {{ route.id }});\n            {% endfor %}\n        {% endif %}\n        \n        // Set up event listeners for add/edit/delete buttons\n        document.getElementById(\'saveRouteBtn\').addEventListener(\'click\', saveRoute);\n        document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                viewRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                editRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                deleteRoute(routeId);\n            });\n        });\n    });\n    \n    function initRouteMap(elementId, routeId) {\n        // Create a map for the route card\n        const map = L.map(elementId).setView([51.505, -0.09], 13); // Default view\n        \n        // Add OpenStreetMap tiles\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(map);\n        \n        // In a real application, we would load the route path and stops from an API\n        // For now, we\'ll just simulate it with fetch\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route && route.stops && route.stops.length > 0) {\n                    const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                    \n                    // Create a polyline for the route\n                    const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                    \n                    // Add markers for each stop\n                    route.stops.forEach(stop => {\n                        L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(stop.name)\n                            .addTo(map);\n                    });\n                    \n                    // Fit the map to show the entire route\n                    map.fitBounds(routeLine.getBounds());\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading route data:\', error);\n                // Show error on map\n                const errorMsg = L.divIcon({\n                    html: \'<div class="alert alert-warning">Error loading route data</div>\',\n                    className: \'map-error\',\n                    iconSize: [200, 50]\n                });\n                L.marker([51.505, -0.09], {icon: errorMsg}).addTo(map);\n            });\n    }\n    \n    function addStopRow() {\n        const tbody = document.querySelector(\'#stopsTable tbody\');\n        \n        // Remove the "no stops" message if present\n        if (tbody.querySelector(\'td[colspan="5"]\')) {\n            tbody.innerHTML = \'\';\n        }\n        \n        // Get current number of stops\n        const stopCount = tbody.querySelectorAll(\'tr\').length + 1;\n        \n        // Create new row\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n            <td>${stopCount}</td>\n            <td>\n                <select class="form-select form-select-sm" required>\n                    <option value="">Select Stop</option>\n                    <!-- Stops will be loaded dynamically -->\n                </select>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <button type="button" class="btn btn-sm btn-danger remove-stop">\n                    <i class="fas fa-times"></i>\n                </button>\n            </td>\n        `;\n        \n        // Add event listener to the remove button\n        row.querySelector(\'.remove-stop\').addEventListener(\'click\', function() {\n            row.remove();\n            \n            // Reindex the stops\n            const rows = tbody.querySelectorAll(\'tr\');\n            if (rows.length === 0) {\n                // Add "no stops" message back\n                tbody.innerHTML = `\n                    <tr>\n                        <td colspan="5" class="text-center py-3">\n                            <p class="text-muted mb-2">No stops added yet</p>\n                            <button type="button" class="btn btn-sm btn-outline-primary" id="addStopBtn">\n                                <i class="fas fa-plus me-1"></i> Add Stop\n                            </button>\n                        </td>\n                    </tr>\n                `;\n                document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n            } else {\n                rows.forEach((row, index) => {\n                    row.querySelector(\'td:first-child\').textContent = index + 1;\n                });\n            }\n        });\n        \n        // Add the row to the table\n        tbody.appendChild(row);\n        \n        // Load stops for the dropdown\n        const select = row.querySelector(\'select\');\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                stops.forEach(stop => {\n                    const option = document.createElement(\'option\');\n                    option.value = stop.id;\n                    option.textContent = stop.name;\n                    select.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n            });\n    }\n    \n    function saveRoute() {\n        // Get form values\n        const routeNumber = document.getElementById(\'routeNumber\').value;\n        const routeName = document.getElementById(\'routeName\').value;\n        const routeDescription = document.getElementById(\'routeDescription\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Get stops\n        const stops = [];\n        const stopRows = document.querySelectorAll(\'#stopsTable tbody tr\');\n        \n        stopRows.forEach((row, index) => {\n            // Skip the "no stops" row\n            if (row.querySelector(\'td[colspan="5"]\')) {\n                return;\n            }\n            \n            const stopId = row.querySelector(\'select\').value;\n            const arrivalTime = row.querySelector(\'input[type="time"]:nth-of-type(1)\').value;\n            const departureTime = row.querySelector(\'input[type="time"]:nth-of-type(2)\').value;\n            \n            stops.push({\n                stop_id: stopId,\n                sequence: index + 1,\n                scheduled_arrival: arrivalTime,\n                scheduled_departure: departureTime\n            });\n        });\n        \n        // Build the route data\n        const routeData = {\n            route_number: routeNumber,\n            name: routeName,\n            description: routeDescription,\n            is_active: isActive,\n            stops: stops\n        };\n        \n        console.log(\'Route data to save:\', routeData);\n        alert(\'Route added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addRouteModal\'));\n        modal.hide();\n        document.getElementById(\'addRouteForm\').reset();\n        \n        // In a real application, we would refresh the routes list or add the new route to the page\n    }\n    \n    function viewRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the view modal\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route) {\n                    // Set basic route info\n                    document.getElementById(\'viewRouteNumber\').textContent = route.route_number;\n                    document.getElementById(\'viewRouteName\').textContent = route.name;\n                    document.getElementById(\'viewRouteDescription\').textContent = route.description || \'No description provided\';\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewRouteStatus\');\n                    if (route.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the route map\n                    const map = L.map(\'viewRouteMap\').setView([51.505, -0.09], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    if (route.stops && route.stops.length > 0) {\n                        const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                        \n                        // Create a polyline for the route\n                        const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                        \n                        // Add markers for each stop\n                        route.stops.forEach(stop => {\n                            L.marker([stop.latitude, stop.longitude])\n                                .bindTooltip(stop.name)\n                                .addTo(map);\n                        });\n                        \n                        // Fit the map to show the entire route\n                        map.fitBounds(routeLine.getBounds());\n                        \n                        // Populate stops table\n                        const stopsTable = document.getElementById(\'viewStopsTable\');\n                        stopsTable.innerHTML = \'\';\n                        \n                        route.stops.forEach(stop => {\n                            const row = document.createElement(\'tr\');\n                            row.innerHTML = `\n                                <td>${stop.sequence}</td>\n                                <td>${stop.name}</td>\n                                <td>${stop.scheduled_arrival || \'N/A\'}</td>\n                                <td>${stop.scheduled_departure || \'N/A\'}</td>\n                                <td>${stop.latitude.toFixed(4)}, ${stop.longitude.toFixed(4)}</td>\n                            `;\n                            stopsTable.appendChild(row);\n                        });\n                    } else {\n                        document.getElementById(\'viewStopsTable\').innerHTML = `\n                            <tr>\n                                <td colspan="5" class="text-center">No stops defined for this route</td>\n                            </tr>\n                        `;\n                    }\n                    \n                    // Load active buses for this route\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            const activeBuses = buses.filter(bus => bus.route_id == routeId);\n                            const busesList = document.getElementById(\'viewActiveBuses\');\n                            \n                            if (activeBuses.length > 0) {\n                                busesList.innerHTML = \'\';\n                                activeBuses.forEach(bus => {\n                                    // Add bus to the list\n                                    const listItem = document.createElement(\'li\');\n                                    listItem.className = \'list-group-item d-flex justify-content-between align-items-center\';\n                                    listItem.innerHTML = `\n                                        <span>Bus ${bus.bus_number}</span>\n                                        <button class="btn btn-sm btn-outline-primary view-bus-btn" data-bus-id="${bus.id}">\n                                            View\n                                        </button>\n                                    `;\n                                    busesList.appendChild(listItem);\n                                    \n                                    // Add bus to the map\n                                    if (bus.latitude && bus.longitude) {\n                                        const busIcon = L.divIcon({\n                                            html: `<i class="fas fa-bus"></i>`,\n                                            className: \'bus-icon\',\n                                            iconSize: [20, 20]\n                                        });\n                                        \n                                        L.marker([bus.latitude, bus.longitude], {icon: busIcon})\n                                            .bindTooltip(`Bus ${bus.bus_number}`)\n                                            .addTo(map);\n                                    }\n                                });\n                            } else {\n                                busesList.innerHTML = `\n                                    <li class="list-group-item text-center">\n                                        No buses currently on this route\n                                    </li>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses:\', error);\n                            document.getElementById(\'viewActiveBuses\').innerHTML = `\n                                <li class="list-group-item text-danger">\n                                    Error loading active buses\n                                </li>\n                            `;\n                        });\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewRouteModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching route details:\', error);\n                alert(\'Failed to load route details\');\n            });\n    }\n    \n    function editRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the edit form\n        alert(`Edit route ${routeId} (not implemented in this demo)`);\n    }\n    \n    function deleteRoute(routeId) {\n        // In a real application, this would show a confirmation dialog and then delete the route\n        if (confirm(`Are you sure you want to delete route with ID ${routeId}?`)) {\n            alert(`Route ${routeId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/routes.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d6f2bbeee3bb0aaf98e87dcecf8947b462aaeb0f84715331c5f66a0f29d9a981e00d4b20b0be1235eb29ab897af2ebfa09a4d14ba0d1a0763523c57dc76b8175_0
2025-05-25 18:29:08,504 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize maps for each route\n        {% if routes %}\n            {% for route in routes %}\n                initRouteMap(\'map-{{ route.id }}\', {{ route.id }});\n            {% endfor %}\n        {% endif %}\n        \n        // Set up event listeners for add/edit/delete buttons\n        document.getElementById(\'saveRouteBtn\').addEventListener(\'click\', saveRoute);\n        document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                viewRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                editRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                deleteRoute(routeId);\n            });\n        });\n    });\n    \n    function initRouteMap(elementId, routeId) {\n        // Create a map for the route card\n        const map = L.map(elementId).setView([51.505, -0.09], 13); // Default view\n        \n        // Add OpenStreetMap tiles\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(map);\n        \n        // In a real application, we would load the route path and stops from an API\n        // For now, we\'ll just simulate it with fetch\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route && route.stops && route.stops.length > 0) {\n                    const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                    \n                    // Create a polyline for the route\n                    const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                    \n                    // Add markers for each stop\n                    route.stops.forEach(stop => {\n                        L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(stop.name)\n                            .addTo(map);\n                    });\n                    \n                    // Fit the map to show the entire route\n                    map.fitBounds(routeLine.getBounds());\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading route data:\', error);\n                // Show error on map\n                const errorMsg = L.divIcon({\n                    html: \'<div class="alert alert-warning">Error loading route data</div>\',\n                    className: \'map-error\',\n                    iconSize: [200, 50]\n                });\n                L.marker([51.505, -0.09], {icon: errorMsg}).addTo(map);\n            });\n    }\n    \n    function addStopRow() {\n        const tbody = document.querySelector(\'#stopsTable tbody\');\n        \n        // Remove the "no stops" message if present\n        if (tbody.querySelector(\'td[colspan="5"]\')) {\n            tbody.innerHTML = \'\';\n        }\n        \n        // Get current number of stops\n        const stopCount = tbody.querySelectorAll(\'tr\').length + 1;\n        \n        // Create new row\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n            <td>${stopCount}</td>\n            <td>\n                <select class="form-select form-select-sm" required>\n                    <option value="">Select Stop</option>\n                    <!-- Stops will be loaded dynamically -->\n                </select>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <button type="button" class="btn btn-sm btn-danger remove-stop">\n                    <i class="fas fa-times"></i>\n                </button>\n            </td>\n        `;\n        \n        // Add event listener to the remove button\n        row.querySelector(\'.remove-stop\').addEventListener(\'click\', function() {\n            row.remove();\n            \n            // Reindex the stops\n            const rows = tbody.querySelectorAll(\'tr\');\n            if (rows.length === 0) {\n                // Add "no stops" message back\n                tbody.innerHTML = `\n                    <tr>\n                        <td colspan="5" class="text-center py-3">\n                            <p class="text-muted mb-2">No stops added yet</p>\n                            <button type="button" class="btn btn-sm btn-outline-primary" id="addStopBtn">\n                                <i class="fas fa-plus me-1"></i> Add Stop\n                            </button>\n                        </td>\n                    </tr>\n                `;\n                document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n            } else {\n                rows.forEach((row, index) => {\n                    row.querySelector(\'td:first-child\').textContent = index + 1;\n                });\n            }\n        });\n        \n        // Add the row to the table\n        tbody.appendChild(row);\n        \n        // Load stops for the dropdown\n        const select = row.querySelector(\'select\');\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                stops.forEach(stop => {\n                    const option = document.createElement(\'option\');\n                    option.value = stop.id;\n                    option.textContent = stop.name;\n                    select.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n            });\n    }\n    \n    function saveRoute() {\n        // Get form values\n        const routeNumber = document.getElementById(\'routeNumber\').value;\n        const routeName = document.getElementById(\'routeName\').value;\n        const routeDescription = document.getElementById(\'routeDescription\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Get stops\n        const stops = [];\n        const stopRows = document.querySelectorAll(\'#stopsTable tbody tr\');\n        \n        stopRows.forEach((row, index) => {\n            // Skip the "no stops" row\n            if (row.querySelector(\'td[colspan="5"]\')) {\n                return;\n            }\n            \n            const stopId = row.querySelector(\'select\').value;\n            const arrivalTime = row.querySelector(\'input[type="time"]:nth-of-type(1)\').value;\n            const departureTime = row.querySelector(\'input[type="time"]:nth-of-type(2)\').value;\n            \n            stops.push({\n                stop_id: stopId,\n                sequence: index + 1,\n                scheduled_arrival: arrivalTime,\n                scheduled_departure: departureTime\n            });\n        });\n        \n        // Build the route data\n        const routeData = {\n            route_number: routeNumber,\n            name: routeName,\n            description: routeDescription,\n            is_active: isActive,\n            stops: stops\n        };\n        \n        console.log(\'Route data to save:\', routeData);\n        alert(\'Route added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addRouteModal\'));\n        modal.hide();\n        document.getElementById(\'addRouteForm\').reset();\n        \n        // In a real application, we would refresh the routes list or add the new route to the page\n    }\n    \n    function viewRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the view modal\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route) {\n                    // Set basic route info\n                    document.getElementById(\'viewRouteNumber\').textContent = route.route_number;\n                    document.getElementById(\'viewRouteName\').textContent = route.name;\n                    document.getElementById(\'viewRouteDescription\').textContent = route.description || \'No description provided\';\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewRouteStatus\');\n                    if (route.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the route map\n                    const map = L.map(\'viewRouteMap\').setView([51.505, -0.09], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    if (route.stops && route.stops.length > 0) {\n                        const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                        \n                        // Create a polyline for the route\n                        const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                        \n                        // Add markers for each stop\n                        route.stops.forEach(stop => {\n                            L.marker([stop.latitude, stop.longitude])\n                                .bindTooltip(stop.name)\n                                .addTo(map);\n                        });\n                        \n                        // Fit the map to show the entire route\n                        map.fitBounds(routeLine.getBounds());\n                        \n                        // Populate stops table\n                        const stopsTable = document.getElementById(\'viewStopsTable\');\n                        stopsTable.innerHTML = \'\';\n                        \n                        route.stops.forEach(stop => {\n                            const row = document.createElement(\'tr\');\n                            row.innerHTML = `\n                                <td>${stop.sequence}</td>\n                                <td>${stop.name}</td>\n                                <td>${stop.scheduled_arrival || \'N/A\'}</td>\n                                <td>${stop.scheduled_departure || \'N/A\'}</td>\n                                <td>${stop.latitude.toFixed(4)}, ${stop.longitude.toFixed(4)}</td>\n                            `;\n                            stopsTable.appendChild(row);\n                        });\n                    } else {\n                        document.getElementById(\'viewStopsTable\').innerHTML = `\n                            <tr>\n                                <td colspan="5" class="text-center">No stops defined for this route</td>\n                            </tr>\n                        `;\n                    }\n                    \n                    // Load active buses for this route\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            const activeBuses = buses.filter(bus => bus.route_id == routeId);\n                            const busesList = document.getElementById(\'viewActiveBuses\');\n                            \n                            if (activeBuses.length > 0) {\n                                busesList.innerHTML = \'\';\n                                activeBuses.forEach(bus => {\n                                    // Add bus to the list\n                                    const listItem = document.createElement(\'li\');\n                                    listItem.className = \'list-group-item d-flex justify-content-between align-items-center\';\n                                    listItem.innerHTML = `\n                                        <span>Bus ${bus.bus_number}</span>\n                                        <button class="btn btn-sm btn-outline-primary view-bus-btn" data-bus-id="${bus.id}">\n                                            View\n                                        </button>\n                                    `;\n                                    busesList.appendChild(listItem);\n                                    \n                                    // Add bus to the map\n                                    if (bus.latitude && bus.longitude) {\n                                        const busIcon = L.divIcon({\n                                            html: `<i class="fas fa-bus"></i>`,\n                                            className: \'bus-icon\',\n                                            iconSize: [20, 20]\n                                        });\n                                        \n                                        L.marker([bus.latitude, bus.longitude], {icon: busIcon})\n                                            .bindTooltip(`Bus ${bus.bus_number}`)\n                                            .addTo(map);\n                                    }\n                                });\n                            } else {\n                                busesList.innerHTML = `\n                                    <li class="list-group-item text-center">\n                                        No buses currently on this route\n                                    </li>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses:\', error);\n                            document.getElementById(\'viewActiveBuses\').innerHTML = `\n                                <li class="list-group-item text-danger">\n                                    Error loading active buses\n                                </li>\n                            `;\n                        });\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewRouteModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching route details:\', error);\n                alert(\'Failed to load route details\');\n            });\n    }\n    \n    function editRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the edit form\n        alert(`Edit route ${routeId} (not implemented in this demo)`);\n    }\n    \n    function deleteRoute(routeId) {\n        // In a real application, this would show a confirmation dialog and then delete the route\n        if (confirm(`Are you sure you want to delete route with ID ${routeId}?`)) {\n            alert(`Route ${routeId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize maps for each route\n        {% if routes %}\n            {% for route in routes %}\n                initRouteMap(\'map-{{ route.id }}\', {{ route.id }});\n            {% endfor %}\n        {% endif %}\n        \n        // Set up event listeners for add/edit/delete buttons\n        document.getElementById(\'saveRouteBtn\').addEventListener(\'click\', saveRoute);\n        document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                viewRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                editRoute(routeId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-route\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const routeId = this.getAttribute(\'data-route-id\');\n                deleteRoute(routeId);\n            });\n        });\n    });\n    \n    function initRouteMap(elementId, routeId) {\n        // Create a map for the route card\n        const map = L.map(elementId).setView([51.505, -0.09], 13); // Default view\n        \n        // Add OpenStreetMap tiles\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(map);\n        \n        // In a real application, we would load the route path and stops from an API\n        // For now, we\'ll just simulate it with fetch\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route && route.stops && route.stops.length > 0) {\n                    const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                    \n                    // Create a polyline for the route\n                    const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                    \n                    // Add markers for each stop\n                    route.stops.forEach(stop => {\n                        L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(stop.name)\n                            .addTo(map);\n                    });\n                    \n                    // Fit the map to show the entire route\n                    map.fitBounds(routeLine.getBounds());\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading route data:\', error);\n                // Show error on map\n                const errorMsg = L.divIcon({\n                    html: \'<div class="alert alert-warning">Error loading route data</div>\',\n                    className: \'map-error\',\n                    iconSize: [200, 50]\n                });\n                L.marker([51.505, -0.09], {icon: errorMsg}).addTo(map);\n            });\n    }\n    \n    function addStopRow() {\n        const tbody = document.querySelector(\'#stopsTable tbody\');\n        \n        // Remove the "no stops" message if present\n        if (tbody.querySelector(\'td[colspan="5"]\')) {\n            tbody.innerHTML = \'\';\n        }\n        \n        // Get current number of stops\n        const stopCount = tbody.querySelectorAll(\'tr\').length + 1;\n        \n        // Create new row\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n            <td>${stopCount}</td>\n            <td>\n                <select class="form-select form-select-sm" required>\n                    <option value="">Select Stop</option>\n                    <!-- Stops will be loaded dynamically -->\n                </select>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <input type="time" class="form-control form-control-sm" required>\n            </td>\n            <td>\n                <button type="button" class="btn btn-sm btn-danger remove-stop">\n                    <i class="fas fa-times"></i>\n                </button>\n            </td>\n        `;\n        \n        // Add event listener to the remove button\n        row.querySelector(\'.remove-stop\').addEventListener(\'click\', function() {\n            row.remove();\n            \n            // Reindex the stops\n            const rows = tbody.querySelectorAll(\'tr\');\n            if (rows.length === 0) {\n                // Add "no stops" message back\n                tbody.innerHTML = `\n                    <tr>\n                        <td colspan="5" class="text-center py-3">\n                            <p class="text-muted mb-2">No stops added yet</p>\n                            <button type="button" class="btn btn-sm btn-outline-primary" id="addStopBtn">\n                                <i class="fas fa-plus me-1"></i> Add Stop\n                            </button>\n                        </td>\n                    </tr>\n                `;\n                document.getElementById(\'addStopBtn\').addEventListener(\'click\', addStopRow);\n            } else {\n                rows.forEach((row, index) => {\n                    row.querySelector(\'td:first-child\').textContent = index + 1;\n                });\n            }\n        });\n        \n        // Add the row to the table\n        tbody.appendChild(row);\n        \n        // Load stops for the dropdown\n        const select = row.querySelector(\'select\');\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                stops.forEach(stop => {\n                    const option = document.createElement(\'option\');\n                    option.value = stop.id;\n                    option.textContent = stop.name;\n                    select.appendChild(option);\n                });\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n            });\n    }\n    \n    function saveRoute() {\n        // Get form values\n        const routeNumber = document.getElementById(\'routeNumber\').value;\n        const routeName = document.getElementById(\'routeName\').value;\n        const routeDescription = document.getElementById(\'routeDescription\').value;\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Get stops\n        const stops = [];\n        const stopRows = document.querySelectorAll(\'#stopsTable tbody tr\');\n        \n        stopRows.forEach((row, index) => {\n            // Skip the "no stops" row\n            if (row.querySelector(\'td[colspan="5"]\')) {\n                return;\n            }\n            \n            const stopId = row.querySelector(\'select\').value;\n            const arrivalTime = row.querySelector(\'input[type="time"]:nth-of-type(1)\').value;\n            const departureTime = row.querySelector(\'input[type="time"]:nth-of-type(2)\').value;\n            \n            stops.push({\n                stop_id: stopId,\n                sequence: index + 1,\n                scheduled_arrival: arrivalTime,\n                scheduled_departure: departureTime\n            });\n        });\n        \n        // Build the route data\n        const routeData = {\n            route_number: routeNumber,\n            name: routeName,\n            description: routeDescription,\n            is_active: isActive,\n            stops: stops\n        };\n        \n        console.log(\'Route data to save:\', routeData);\n        alert(\'Route added successfully (simulated)\');\n        \n        // Close modal and reset form\n        const modal = bootstrap.Modal.getInstance(document.getElementById(\'addRouteModal\'));\n        modal.hide();\n        document.getElementById(\'addRouteForm\').reset();\n        \n        // In a real application, we would refresh the routes list or add the new route to the page\n    }\n    \n    function viewRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the view modal\n        fetch(`/api/routes?id=${routeId}`)\n            .then(response => response.json())\n            .then(routes => {\n                const route = routes.find(r => r.id == routeId);\n                \n                if (route) {\n                    // Set basic route info\n                    document.getElementById(\'viewRouteNumber\').textContent = route.route_number;\n                    document.getElementById(\'viewRouteName\').textContent = route.name;\n                    document.getElementById(\'viewRouteDescription\').textContent = route.description || \'No description provided\';\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewRouteStatus\');\n                    if (route.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the route map\n                    const map = L.map(\'viewRouteMap\').setView([51.505, -0.09], 13);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(map);\n                    \n                    if (route.stops && route.stops.length > 0) {\n                        const stopCoordinates = route.stops.map(stop => [stop.latitude, stop.longitude]);\n                        \n                        // Create a polyline for the route\n                        const routeLine = L.polyline(stopCoordinates, {color: \'blue\'}).addTo(map);\n                        \n                        // Add markers for each stop\n                        route.stops.forEach(stop => {\n                            L.marker([stop.latitude, stop.longitude])\n                                .bindTooltip(stop.name)\n                                .addTo(map);\n                        });\n                        \n                        // Fit the map to show the entire route\n                        map.fitBounds(routeLine.getBounds());\n                        \n                        // Populate stops table\n                        const stopsTable = document.getElementById(\'viewStopsTable\');\n                        stopsTable.innerHTML = \'\';\n                        \n                        route.stops.forEach(stop => {\n                            const row = document.createElement(\'tr\');\n                            row.innerHTML = `\n                                <td>${stop.sequence}</td>\n                                <td>${stop.name}</td>\n                                <td>${stop.scheduled_arrival || \'N/A\'}</td>\n                                <td>${stop.scheduled_departure || \'N/A\'}</td>\n                                <td>${stop.latitude.toFixed(4)}, ${stop.longitude.toFixed(4)}</td>\n                            `;\n                            stopsTable.appendChild(row);\n                        });\n                    } else {\n                        document.getElementById(\'viewStopsTable\').innerHTML = `\n                            <tr>\n                                <td colspan="5" class="text-center">No stops defined for this route</td>\n                            </tr>\n                        `;\n                    }\n                    \n                    // Load active buses for this route\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            const activeBuses = buses.filter(bus => bus.route_id == routeId);\n                            const busesList = document.getElementById(\'viewActiveBuses\');\n                            \n                            if (activeBuses.length > 0) {\n                                busesList.innerHTML = \'\';\n                                activeBuses.forEach(bus => {\n                                    // Add bus to the list\n                                    const listItem = document.createElement(\'li\');\n                                    listItem.className = \'list-group-item d-flex justify-content-between align-items-center\';\n                                    listItem.innerHTML = `\n                                        <span>Bus ${bus.bus_number}</span>\n                                        <button class="btn btn-sm btn-outline-primary view-bus-btn" data-bus-id="${bus.id}">\n                                            View\n                                        </button>\n                                    `;\n                                    busesList.appendChild(listItem);\n                                    \n                                    // Add bus to the map\n                                    if (bus.latitude && bus.longitude) {\n                                        const busIcon = L.divIcon({\n                                            html: `<i class="fas fa-bus"></i>`,\n                                            className: \'bus-icon\',\n                                            iconSize: [20, 20]\n                                        });\n                                        \n                                        L.marker([bus.latitude, bus.longitude], {icon: busIcon})\n                                            .bindTooltip(`Bus ${bus.bus_number}`)\n                                            .addTo(map);\n                                    }\n                                });\n                            } else {\n                                busesList.innerHTML = `\n                                    <li class="list-group-item text-center">\n                                        No buses currently on this route\n                                    </li>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses:\', error);\n                            document.getElementById(\'viewActiveBuses\').innerHTML = `\n                                <li class="list-group-item text-danger">\n                                    Error loading active buses\n                                </li>\n                            `;\n                        });\n                }\n                \n                // Show the modal\n                const modal = new bootstrap.Modal(document.getElementById(\'viewRouteModal\'));\n                modal.show();\n            })\n            .catch(error => {\n                console.error(\'Error fetching route details:\', error);\n                alert(\'Failed to load route details\');\n            });\n    }\n    \n    function editRoute(routeId) {\n        // In a real application, this would fetch the route data and populate the edit form\n        alert(`Edit route ${routeId} (not implemented in this demo)`);\n    }\n    \n    function deleteRoute(routeId) {\n        // In a real application, this would show a confirmation dialog and then delete the route\n        if (confirm(`Are you sure you want to delete route with ID ${routeId}?`)) {\n            alert(`Route ${routeId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/routes.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d6f2bbeee3bb0aaf98e87dcecf8947b462aaeb0f84715331c5f66a0f29d9a981e00d4b20b0be1235eb29ab897af2ebfa09a4d14ba0d1a0763523c57dc76b8175_0
2025-05-25 18:29:08,507 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/stops.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 59012a857a4e2a01ee634f6aa11633c0bc5066afc45208f7c74d9dc652ac837f0b239672443f13b124a50ace5971c25a511759e8146536d01ddb1288116b8045_0
2025-05-25 18:29:08,511 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize the stops map\n        initStopsMap();\n        \n        // Set up event listeners\n        document.getElementById(\'saveStopBtn\').addEventListener(\'click\', saveStop);\n        document.getElementById(\'refresh-stops-map\').addEventListener(\'click\', refreshStopsMap);\n        document.getElementById(\'center-stops-map\').addEventListener(\'click\', centerStopsMap);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                viewStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                editStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                deleteStop(stopId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'stopSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#stopTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n        \n        // Initialize map for adding stops\n        const pickLocationMap = L.map(\'pickLocationMap\').setView([51.505, -0.09], 13);\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(pickLocationMap);\n        \n        let marker;\n        \n        pickLocationMap.on(\'click\', function(e) {\n            // Update form fields with coordinates\n            document.getElementById(\'stopLatitude\').value = e.latlng.lat.toFixed(6);\n            document.getElementById(\'stopLongitude\').value = e.latlng.lng.toFixed(6);\n            \n            // Update or add marker\n            if (marker) {\n                marker.setLatLng(e.latlng);\n            } else {\n                marker = L.marker(e.latlng).addTo(pickLocationMap);\n            }\n        });\n        \n        // Reinitialize map when modal is shown\n        document.getElementById(\'addStopModal\').addEventListener(\'shown.bs.modal\', function() {\n            pickLocationMap.invalidateSize();\n            \n            // Use current map center or user location as starting point\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    position => {\n                        pickLocationMap.setView([position.coords.latitude, position.coords.longitude], 15);\n                    },\n                    error => {\n                        console.warn(\'Geolocation error:\', error);\n                    }\n                );\n            }\n        });\n    });\n    \n    // Initialize the stops map\n    let stopsMap;\n    let stopsMarkers = [];\n    \n    function initStopsMap() {\n        stopsMap = L.map(\'stop-map\').setView([51.505, -0.09], 13);\n        \n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(stopsMap);\n        \n        // Load stops from API\n        loadStopsOnMap();\n    }\n    \n    function loadStopsOnMap() {\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                // Clear existing markers\n                stopsMarkers.forEach(marker => stopsMap.removeLayer(marker));\n                stopsMarkers = [];\n                \n                if (stops.length > 0) {\n                    const bounds = L.latLngBounds();\n                    \n                    stops.forEach(stop => {\n                        const marker = L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(`<b>${stop.stop_code}</b>: ${stop.name}`)\n                            .bindPopup(`\n                                <div>\n                                    <h6>${stop.name}</h6>\n                                    <p><strong>Code:</strong> ${stop.stop_code}</p>\n                                    <p><strong>Address:</strong> ${stop.address || \'N/A\'}</p>\n                                    <button class="btn btn-sm btn-primary view-stop-btn" \n                                        data-stop-id="${stop.id}">View Details</button>\n                                </div>\n                            `)\n                            .addTo(stopsMap);\n                            \n                        // Add click event to the View Details button in popup\n                        marker.on(\'popupopen\', function() {\n                            const popupButton = document.querySelector(\'.view-stop-btn\');\n                            if (popupButton) {\n                                popupButton.addEventListener(\'click\', function() {\n                                    const stopId = this.getAttribute(\'data-stop-id\');\n                                    viewStop(stopId);\n                                });\n                            }\n                        });\n                        \n                        stopsMarkers.push(marker);\n                        bounds.extend([stop.latitude, stop.longitude]);\n                    });\n                    \n                    // Fit map to show all stops\n                    stopsMap.fitBounds(bounds);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n                alert(\'Failed to load stops data\');\n            });\n    }\n    \n    function refreshStopsMap() {\n        loadStopsOnMap();\n    }\n    \n    function centerStopsMap() {\n        if (stopsMarkers.length > 0) {\n            const bounds = L.latLngBounds(stopsMarkers.map(marker => marker.getLatLng()));\n            stopsMap.fitBounds(bounds);\n        }\n    }\n    \n    function saveStop() {\n        // Get form values\n        const stopCode = document.getElementById(\'stopCode\').value;\n        const stopName = document.getElementById(\'stopName\').value;\n        const stopAddress = document.getElementById(\'stopAddress\').value;\n        const latitude = parseFloat(document.getElementById(\'stopLatitude\').value);\n        const longitude = parseFloat(document.getElementById(\'stopLongitude\').value);\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Validate form\n        if (!stopCode || !stopName || isNaN(latitude) || isNaN(longitude)) {\n            alert(\'Please fill all required fields with valid values\');\n            return;\n        }\n        \n        // Build the stop data\n        const stopData = {\n            stop_code: stopCode,\n            name: stopName,\n            address: stopAddress,\n            latitude: latitude,\n            longitude: longitude,\n            is_active: isActive\n        };\n        \n        // This would be replaced with an actual API call\n        console.log(\'Stop data to save:\', stopData);\n        \n        // Simulate API call (in a real app, this would be a fetch POST request)\n        setTimeout(() => {\n            alert(\'Stop added successfully (simulated)\');\n            \n            // Close modal and reset form\n            const modal = bootstrap.Modal.getInstance(document.getElementById(\'addStopModal\'));\n            modal.hide();\n            document.getElementById(\'addStopForm\').reset();\n            \n            // Refresh the stops map\n            refreshStopsMap();\n        }, 500);\n    }\n    \n    function viewStop(stopId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/stops?id=${stopId}`)\n            .then(response => response.json())\n            .then(stops => {\n                const stop = stops.find(s => s.id == stopId);\n                \n                if (stop) {\n                    // Populate the view modal with stop details\n                    document.getElementById(\'viewStopCode\').textContent = stop.stop_code;\n                    document.getElementById(\'viewStopName\').textContent = stop.name;\n                    document.getElementById(\'viewStopAddress\').textContent = stop.address || \'N/A\';\n                    document.getElementById(\'viewStopCoordinates\').textContent = \n                        `${stop.latitude.toFixed(6)}, ${stop.longitude.toFixed(6)}`;\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewStopStatus\');\n                    if (stop.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the map\n                    const viewMap = L.map(\'viewStopMap\').setView([stop.latitude, stop.longitude], 15);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(viewMap);\n                    \n                    // Add stop marker\n                    L.marker([stop.latitude, stop.longitude])\n                        .bindTooltip(stop.name)\n                        .addTo(viewMap);\n                    \n                    // Load routes for this stop\n                    fetch(\'/api/routes\')\n                        .then(response => response.json())\n                        .then(routes => {\n                            const routesTable = document.getElementById(\'viewStopRoutesTable\');\n                            routesTable.innerHTML = \'\';\n                            \n                            let foundRoutes = false;\n                            \n                            routes.forEach(route => {\n                                const stopsOnRoute = route.stops.filter(s => s.id === stop.id);\n                                \n                                stopsOnRoute.forEach(stopOnRoute => {\n                                    foundRoutes = true;\n                                    const row = document.createElement(\'tr\');\n                                    \n                                    row.innerHTML = `\n                                        <td>\n                                            <span class="badge bg-primary">${route.route_number}</span>\n                                            ${route.name}\n                                        </td>\n                                        <td>${stopOnRoute.sequence}</td>\n                                        <td>${stopOnRoute.scheduled_arrival || \'N/A\'}</td>\n                                        <td>${stopOnRoute.scheduled_departure || \'N/A\'}</td>\n                                        <td>${stopOnRoute.distance_from_start ? stopOnRoute.distance_from_start + \' km\' : \'N/A\'}</td>\n                                    `;\n                                    \n                                    routesTable.appendChild(row);\n                                });\n                            });\n                            \n                            if (!foundRoutes) {\n                                routesTable.innerHTML = `\n                                    <tr>\n                                        <td colspan="5" class="text-center py-3">\n                                            No routes serve this stop\n                                        </td>\n                                    </tr>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading routes for stop:\', error);\n                            document.getElementById(\'viewStopRoutesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="5" class="text-center text-danger py-3">\n                                        Error loading route data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Load upcoming buses for this stop\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            // In a real app, we\'d fetch ETA predictions for this stop\n                            // For now, we\'ll just show a placeholder\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center py-3">\n                                        No upcoming buses scheduled at this time\n                                    </td>\n                                </tr>\n                            `;\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses for stop:\', error);\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center text-danger py-3">\n                                        Error loading bus data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Show the modal\n                    const modal = new bootstrap.Modal(document.getElementById(\'viewStopModal\'));\n                    modal.show();\n                    \n                    // Fix map rendering issues\n                    setTimeout(() => {\n                        viewMap.invalidateSize();\n                    }, 300);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error fetching stop details:\', error);\n                alert(\'Failed to load stop details\');\n            });\n    }\n    \n    function editStop(stopId) {\n        // In a real application, this would fetch the stop data and populate the edit form\n        alert(`Edit stop ${stopId} (not implemented in this demo)`);\n    }\n    \n    function deleteStop(stopId) {\n        // In a real application, this would show a confirmation dialog and then delete the stop\n        if (confirm(`Are you sure you want to delete stop with ID ${stopId}?`)) {\n            alert(`Stop ${stopId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize the stops map\n        initStopsMap();\n        \n        // Set up event listeners\n        document.getElementById(\'saveStopBtn\').addEventListener(\'click\', saveStop);\n        document.getElementById(\'refresh-stops-map\').addEventListener(\'click\', refreshStopsMap);\n        document.getElementById(\'center-stops-map\').addEventListener(\'click\', centerStopsMap);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                viewStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                editStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                deleteStop(stopId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'stopSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#stopTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n        \n        // Initialize map for adding stops\n        const pickLocationMap = L.map(\'pickLocationMap\').setView([51.505, -0.09], 13);\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(pickLocationMap);\n        \n        let marker;\n        \n        pickLocationMap.on(\'click\', function(e) {\n            // Update form fields with coordinates\n            document.getElementById(\'stopLatitude\').value = e.latlng.lat.toFixed(6);\n            document.getElementById(\'stopLongitude\').value = e.latlng.lng.toFixed(6);\n            \n            // Update or add marker\n            if (marker) {\n                marker.setLatLng(e.latlng);\n            } else {\n                marker = L.marker(e.latlng).addTo(pickLocationMap);\n            }\n        });\n        \n        // Reinitialize map when modal is shown\n        document.getElementById(\'addStopModal\').addEventListener(\'shown.bs.modal\', function() {\n            pickLocationMap.invalidateSize();\n            \n            // Use current map center or user location as starting point\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    position => {\n                        pickLocationMap.setView([position.coords.latitude, position.coords.longitude], 15);\n                    },\n                    error => {\n                        console.warn(\'Geolocation error:\', error);\n                    }\n                );\n            }\n        });\n    });\n    \n    // Initialize the stops map\n    let stopsMap;\n    let stopsMarkers = [];\n    \n    function initStopsMap() {\n        stopsMap = L.map(\'stop-map\').setView([51.505, -0.09], 13);\n        \n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(stopsMap);\n        \n        // Load stops from API\n        loadStopsOnMap();\n    }\n    \n    function loadStopsOnMap() {\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                // Clear existing markers\n                stopsMarkers.forEach(marker => stopsMap.removeLayer(marker));\n                stopsMarkers = [];\n                \n                if (stops.length > 0) {\n                    const bounds = L.latLngBounds();\n                    \n                    stops.forEach(stop => {\n                        const marker = L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(`<b>${stop.stop_code}</b>: ${stop.name}`)\n                            .bindPopup(`\n                                <div>\n                                    <h6>${stop.name}</h6>\n                                    <p><strong>Code:</strong> ${stop.stop_code}</p>\n                                    <p><strong>Address:</strong> ${stop.address || \'N/A\'}</p>\n                                    <button class="btn btn-sm btn-primary view-stop-btn" \n                                        data-stop-id="${stop.id}">View Details</button>\n                                </div>\n                            `)\n                            .addTo(stopsMap);\n                            \n                        // Add click event to the View Details button in popup\n                        marker.on(\'popupopen\', function() {\n                            const popupButton = document.querySelector(\'.view-stop-btn\');\n                            if (popupButton) {\n                                popupButton.addEventListener(\'click\', function() {\n                                    const stopId = this.getAttribute(\'data-stop-id\');\n                                    viewStop(stopId);\n                                });\n                            }\n                        });\n                        \n                        stopsMarkers.push(marker);\n                        bounds.extend([stop.latitude, stop.longitude]);\n                    });\n                    \n                    // Fit map to show all stops\n                    stopsMap.fitBounds(bounds);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n                alert(\'Failed to load stops data\');\n            });\n    }\n    \n    function refreshStopsMap() {\n        loadStopsOnMap();\n    }\n    \n    function centerStopsMap() {\n        if (stopsMarkers.length > 0) {\n            const bounds = L.latLngBounds(stopsMarkers.map(marker => marker.getLatLng()));\n            stopsMap.fitBounds(bounds);\n        }\n    }\n    \n    function saveStop() {\n        // Get form values\n        const stopCode = document.getElementById(\'stopCode\').value;\n        const stopName = document.getElementById(\'stopName\').value;\n        const stopAddress = document.getElementById(\'stopAddress\').value;\n        const latitude = parseFloat(document.getElementById(\'stopLatitude\').value);\n        const longitude = parseFloat(document.getElementById(\'stopLongitude\').value);\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Validate form\n        if (!stopCode || !stopName || isNaN(latitude) || isNaN(longitude)) {\n            alert(\'Please fill all required fields with valid values\');\n            return;\n        }\n        \n        // Build the stop data\n        const stopData = {\n            stop_code: stopCode,\n            name: stopName,\n            address: stopAddress,\n            latitude: latitude,\n            longitude: longitude,\n            is_active: isActive\n        };\n        \n        // This would be replaced with an actual API call\n        console.log(\'Stop data to save:\', stopData);\n        \n        // Simulate API call (in a real app, this would be a fetch POST request)\n        setTimeout(() => {\n            alert(\'Stop added successfully (simulated)\');\n            \n            // Close modal and reset form\n            const modal = bootstrap.Modal.getInstance(document.getElementById(\'addStopModal\'));\n            modal.hide();\n            document.getElementById(\'addStopForm\').reset();\n            \n            // Refresh the stops map\n            refreshStopsMap();\n        }, 500);\n    }\n    \n    function viewStop(stopId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/stops?id=${stopId}`)\n            .then(response => response.json())\n            .then(stops => {\n                const stop = stops.find(s => s.id == stopId);\n                \n                if (stop) {\n                    // Populate the view modal with stop details\n                    document.getElementById(\'viewStopCode\').textContent = stop.stop_code;\n                    document.getElementById(\'viewStopName\').textContent = stop.name;\n                    document.getElementById(\'viewStopAddress\').textContent = stop.address || \'N/A\';\n                    document.getElementById(\'viewStopCoordinates\').textContent = \n                        `${stop.latitude.toFixed(6)}, ${stop.longitude.toFixed(6)}`;\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewStopStatus\');\n                    if (stop.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the map\n                    const viewMap = L.map(\'viewStopMap\').setView([stop.latitude, stop.longitude], 15);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(viewMap);\n                    \n                    // Add stop marker\n                    L.marker([stop.latitude, stop.longitude])\n                        .bindTooltip(stop.name)\n                        .addTo(viewMap);\n                    \n                    // Load routes for this stop\n                    fetch(\'/api/routes\')\n                        .then(response => response.json())\n                        .then(routes => {\n                            const routesTable = document.getElementById(\'viewStopRoutesTable\');\n                            routesTable.innerHTML = \'\';\n                            \n                            let foundRoutes = false;\n                            \n                            routes.forEach(route => {\n                                const stopsOnRoute = route.stops.filter(s => s.id === stop.id);\n                                \n                                stopsOnRoute.forEach(stopOnRoute => {\n                                    foundRoutes = true;\n                                    const row = document.createElement(\'tr\');\n                                    \n                                    row.innerHTML = `\n                                        <td>\n                                            <span class="badge bg-primary">${route.route_number}</span>\n                                            ${route.name}\n                                        </td>\n                                        <td>${stopOnRoute.sequence}</td>\n                                        <td>${stopOnRoute.scheduled_arrival || \'N/A\'}</td>\n                                        <td>${stopOnRoute.scheduled_departure || \'N/A\'}</td>\n                                        <td>${stopOnRoute.distance_from_start ? stopOnRoute.distance_from_start + \' km\' : \'N/A\'}</td>\n                                    `;\n                                    \n                                    routesTable.appendChild(row);\n                                });\n                            });\n                            \n                            if (!foundRoutes) {\n                                routesTable.innerHTML = `\n                                    <tr>\n                                        <td colspan="5" class="text-center py-3">\n                                            No routes serve this stop\n                                        </td>\n                                    </tr>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading routes for stop:\', error);\n                            document.getElementById(\'viewStopRoutesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="5" class="text-center text-danger py-3">\n                                        Error loading route data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Load upcoming buses for this stop\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            // In a real app, we\'d fetch ETA predictions for this stop\n                            // For now, we\'ll just show a placeholder\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center py-3">\n                                        No upcoming buses scheduled at this time\n                                    </td>\n                                </tr>\n                            `;\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses for stop:\', error);\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center text-danger py-3">\n                                        Error loading bus data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Show the modal\n                    const modal = new bootstrap.Modal(document.getElementById(\'viewStopModal\'));\n                    modal.show();\n                    \n                    // Fix map rendering issues\n                    setTimeout(() => {\n                        viewMap.invalidateSize();\n                    }, 300);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error fetching stop details:\', error);\n                alert(\'Failed to load stop details\');\n            });\n    }\n    \n    function editStop(stopId) {\n        // In a real application, this would fetch the stop data and populate the edit form\n        alert(`Edit stop ${stopId} (not implemented in this demo)`);\n    }\n    \n    function deleteStop(stopId) {\n        // In a real application, this would show a confirmation dialog and then delete the stop\n        if (confirm(`Are you sure you want to delete stop with ID ${stopId}?`)) {\n            alert(`Stop ${stopId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/stops.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 166ebe7014e433014365d955ede81a7a080aa1e360b6fd3dc3ab4e28db0b672f2c1f28852e44def486ac35884f6bd02c5e15112ebb94c4391b82f92a72d87a1e_0
2025-05-25 18:29:08,514 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize the stops map\n        initStopsMap();\n        \n        // Set up event listeners\n        document.getElementById(\'saveStopBtn\').addEventListener(\'click\', saveStop);\n        document.getElementById(\'refresh-stops-map\').addEventListener(\'click\', refreshStopsMap);\n        document.getElementById(\'center-stops-map\').addEventListener(\'click\', centerStopsMap);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                viewStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                editStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                deleteStop(stopId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'stopSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#stopTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n        \n        // Initialize map for adding stops\n        const pickLocationMap = L.map(\'pickLocationMap\').setView([51.505, -0.09], 13);\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(pickLocationMap);\n        \n        let marker;\n        \n        pickLocationMap.on(\'click\', function(e) {\n            // Update form fields with coordinates\n            document.getElementById(\'stopLatitude\').value = e.latlng.lat.toFixed(6);\n            document.getElementById(\'stopLongitude\').value = e.latlng.lng.toFixed(6);\n            \n            // Update or add marker\n            if (marker) {\n                marker.setLatLng(e.latlng);\n            } else {\n                marker = L.marker(e.latlng).addTo(pickLocationMap);\n            }\n        });\n        \n        // Reinitialize map when modal is shown\n        document.getElementById(\'addStopModal\').addEventListener(\'shown.bs.modal\', function() {\n            pickLocationMap.invalidateSize();\n            \n            // Use current map center or user location as starting point\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    position => {\n                        pickLocationMap.setView([position.coords.latitude, position.coords.longitude], 15);\n                    },\n                    error => {\n                        console.warn(\'Geolocation error:\', error);\n                    }\n                );\n            }\n        });\n    });\n    \n    // Initialize the stops map\n    let stopsMap;\n    let stopsMarkers = [];\n    \n    function initStopsMap() {\n        stopsMap = L.map(\'stop-map\').setView([51.505, -0.09], 13);\n        \n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(stopsMap);\n        \n        // Load stops from API\n        loadStopsOnMap();\n    }\n    \n    function loadStopsOnMap() {\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                // Clear existing markers\n                stopsMarkers.forEach(marker => stopsMap.removeLayer(marker));\n                stopsMarkers = [];\n                \n                if (stops.length > 0) {\n                    const bounds = L.latLngBounds();\n                    \n                    stops.forEach(stop => {\n                        const marker = L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(`<b>${stop.stop_code}</b>: ${stop.name}`)\n                            .bindPopup(`\n                                <div>\n                                    <h6>${stop.name}</h6>\n                                    <p><strong>Code:</strong> ${stop.stop_code}</p>\n                                    <p><strong>Address:</strong> ${stop.address || \'N/A\'}</p>\n                                    <button class="btn btn-sm btn-primary view-stop-btn" \n                                        data-stop-id="${stop.id}">View Details</button>\n                                </div>\n                            `)\n                            .addTo(stopsMap);\n                            \n                        // Add click event to the View Details button in popup\n                        marker.on(\'popupopen\', function() {\n                            const popupButton = document.querySelector(\'.view-stop-btn\');\n                            if (popupButton) {\n                                popupButton.addEventListener(\'click\', function() {\n                                    const stopId = this.getAttribute(\'data-stop-id\');\n                                    viewStop(stopId);\n                                });\n                            }\n                        });\n                        \n                        stopsMarkers.push(marker);\n                        bounds.extend([stop.latitude, stop.longitude]);\n                    });\n                    \n                    // Fit map to show all stops\n                    stopsMap.fitBounds(bounds);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n                alert(\'Failed to load stops data\');\n            });\n    }\n    \n    function refreshStopsMap() {\n        loadStopsOnMap();\n    }\n    \n    function centerStopsMap() {\n        if (stopsMarkers.length > 0) {\n            const bounds = L.latLngBounds(stopsMarkers.map(marker => marker.getLatLng()));\n            stopsMap.fitBounds(bounds);\n        }\n    }\n    \n    function saveStop() {\n        // Get form values\n        const stopCode = document.getElementById(\'stopCode\').value;\n        const stopName = document.getElementById(\'stopName\').value;\n        const stopAddress = document.getElementById(\'stopAddress\').value;\n        const latitude = parseFloat(document.getElementById(\'stopLatitude\').value);\n        const longitude = parseFloat(document.getElementById(\'stopLongitude\').value);\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Validate form\n        if (!stopCode || !stopName || isNaN(latitude) || isNaN(longitude)) {\n            alert(\'Please fill all required fields with valid values\');\n            return;\n        }\n        \n        // Build the stop data\n        const stopData = {\n            stop_code: stopCode,\n            name: stopName,\n            address: stopAddress,\n            latitude: latitude,\n            longitude: longitude,\n            is_active: isActive\n        };\n        \n        // This would be replaced with an actual API call\n        console.log(\'Stop data to save:\', stopData);\n        \n        // Simulate API call (in a real app, this would be a fetch POST request)\n        setTimeout(() => {\n            alert(\'Stop added successfully (simulated)\');\n            \n            // Close modal and reset form\n            const modal = bootstrap.Modal.getInstance(document.getElementById(\'addStopModal\'));\n            modal.hide();\n            document.getElementById(\'addStopForm\').reset();\n            \n            // Refresh the stops map\n            refreshStopsMap();\n        }, 500);\n    }\n    \n    function viewStop(stopId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/stops?id=${stopId}`)\n            .then(response => response.json())\n            .then(stops => {\n                const stop = stops.find(s => s.id == stopId);\n                \n                if (stop) {\n                    // Populate the view modal with stop details\n                    document.getElementById(\'viewStopCode\').textContent = stop.stop_code;\n                    document.getElementById(\'viewStopName\').textContent = stop.name;\n                    document.getElementById(\'viewStopAddress\').textContent = stop.address || \'N/A\';\n                    document.getElementById(\'viewStopCoordinates\').textContent = \n                        `${stop.latitude.toFixed(6)}, ${stop.longitude.toFixed(6)}`;\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewStopStatus\');\n                    if (stop.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the map\n                    const viewMap = L.map(\'viewStopMap\').setView([stop.latitude, stop.longitude], 15);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(viewMap);\n                    \n                    // Add stop marker\n                    L.marker([stop.latitude, stop.longitude])\n                        .bindTooltip(stop.name)\n                        .addTo(viewMap);\n                    \n                    // Load routes for this stop\n                    fetch(\'/api/routes\')\n                        .then(response => response.json())\n                        .then(routes => {\n                            const routesTable = document.getElementById(\'viewStopRoutesTable\');\n                            routesTable.innerHTML = \'\';\n                            \n                            let foundRoutes = false;\n                            \n                            routes.forEach(route => {\n                                const stopsOnRoute = route.stops.filter(s => s.id === stop.id);\n                                \n                                stopsOnRoute.forEach(stopOnRoute => {\n                                    foundRoutes = true;\n                                    const row = document.createElement(\'tr\');\n                                    \n                                    row.innerHTML = `\n                                        <td>\n                                            <span class="badge bg-primary">${route.route_number}</span>\n                                            ${route.name}\n                                        </td>\n                                        <td>${stopOnRoute.sequence}</td>\n                                        <td>${stopOnRoute.scheduled_arrival || \'N/A\'}</td>\n                                        <td>${stopOnRoute.scheduled_departure || \'N/A\'}</td>\n                                        <td>${stopOnRoute.distance_from_start ? stopOnRoute.distance_from_start + \' km\' : \'N/A\'}</td>\n                                    `;\n                                    \n                                    routesTable.appendChild(row);\n                                });\n                            });\n                            \n                            if (!foundRoutes) {\n                                routesTable.innerHTML = `\n                                    <tr>\n                                        <td colspan="5" class="text-center py-3">\n                                            No routes serve this stop\n                                        </td>\n                                    </tr>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading routes for stop:\', error);\n                            document.getElementById(\'viewStopRoutesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="5" class="text-center text-danger py-3">\n                                        Error loading route data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Load upcoming buses for this stop\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            // In a real app, we\'d fetch ETA predictions for this stop\n                            // For now, we\'ll just show a placeholder\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center py-3">\n                                        No upcoming buses scheduled at this time\n                                    </td>\n                                </tr>\n                            `;\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses for stop:\', error);\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center text-danger py-3">\n                                        Error loading bus data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Show the modal\n                    const modal = new bootstrap.Modal(document.getElementById(\'viewStopModal\'));\n                    modal.show();\n                    \n                    // Fix map rendering issues\n                    setTimeout(() => {\n                        viewMap.invalidateSize();\n                    }, 300);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error fetching stop details:\', error);\n                alert(\'Failed to load stop details\');\n            });\n    }\n    \n    function editStop(stopId) {\n        // In a real application, this would fetch the stop data and populate the edit form\n        alert(`Edit stop ${stopId} (not implemented in this demo)`);\n    }\n    \n    function deleteStop(stopId) {\n        // In a real application, this would show a confirmation dialog and then delete the stop\n        if (confirm(`Are you sure you want to delete stop with ID ${stopId}?`)) {\n            alert(`Stop ${stopId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize the stops map\n        initStopsMap();\n        \n        // Set up event listeners\n        document.getElementById(\'saveStopBtn\').addEventListener(\'click\', saveStop);\n        document.getElementById(\'refresh-stops-map\').addEventListener(\'click\', refreshStopsMap);\n        document.getElementById(\'center-stops-map\').addEventListener(\'click\', centerStopsMap);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                viewStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                editStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                deleteStop(stopId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'stopSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#stopTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n        \n        // Initialize map for adding stops\n        const pickLocationMap = L.map(\'pickLocationMap\').setView([51.505, -0.09], 13);\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(pickLocationMap);\n        \n        let marker;\n        \n        pickLocationMap.on(\'click\', function(e) {\n            // Update form fields with coordinates\n            document.getElementById(\'stopLatitude\').value = e.latlng.lat.toFixed(6);\n            document.getElementById(\'stopLongitude\').value = e.latlng.lng.toFixed(6);\n            \n            // Update or add marker\n            if (marker) {\n                marker.setLatLng(e.latlng);\n            } else {\n                marker = L.marker(e.latlng).addTo(pickLocationMap);\n            }\n        });\n        \n        // Reinitialize map when modal is shown\n        document.getElementById(\'addStopModal\').addEventListener(\'shown.bs.modal\', function() {\n            pickLocationMap.invalidateSize();\n            \n            // Use current map center or user location as starting point\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    position => {\n                        pickLocationMap.setView([position.coords.latitude, position.coords.longitude], 15);\n                    },\n                    error => {\n                        console.warn(\'Geolocation error:\', error);\n                    }\n                );\n            }\n        });\n    });\n    \n    // Initialize the stops map\n    let stopsMap;\n    let stopsMarkers = [];\n    \n    function initStopsMap() {\n        stopsMap = L.map(\'stop-map\').setView([51.505, -0.09], 13);\n        \n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(stopsMap);\n        \n        // Load stops from API\n        loadStopsOnMap();\n    }\n    \n    function loadStopsOnMap() {\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                // Clear existing markers\n                stopsMarkers.forEach(marker => stopsMap.removeLayer(marker));\n                stopsMarkers = [];\n                \n                if (stops.length > 0) {\n                    const bounds = L.latLngBounds();\n                    \n                    stops.forEach(stop => {\n                        const marker = L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(`<b>${stop.stop_code}</b>: ${stop.name}`)\n                            .bindPopup(`\n                                <div>\n                                    <h6>${stop.name}</h6>\n                                    <p><strong>Code:</strong> ${stop.stop_code}</p>\n                                    <p><strong>Address:</strong> ${stop.address || \'N/A\'}</p>\n                                    <button class="btn btn-sm btn-primary view-stop-btn" \n                                        data-stop-id="${stop.id}">View Details</button>\n                                </div>\n                            `)\n                            .addTo(stopsMap);\n                            \n                        // Add click event to the View Details button in popup\n                        marker.on(\'popupopen\', function() {\n                            const popupButton = document.querySelector(\'.view-stop-btn\');\n                            if (popupButton) {\n                                popupButton.addEventListener(\'click\', function() {\n                                    const stopId = this.getAttribute(\'data-stop-id\');\n                                    viewStop(stopId);\n                                });\n                            }\n                        });\n                        \n                        stopsMarkers.push(marker);\n                        bounds.extend([stop.latitude, stop.longitude]);\n                    });\n                    \n                    // Fit map to show all stops\n                    stopsMap.fitBounds(bounds);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n                alert(\'Failed to load stops data\');\n            });\n    }\n    \n    function refreshStopsMap() {\n        loadStopsOnMap();\n    }\n    \n    function centerStopsMap() {\n        if (stopsMarkers.length > 0) {\n            const bounds = L.latLngBounds(stopsMarkers.map(marker => marker.getLatLng()));\n            stopsMap.fitBounds(bounds);\n        }\n    }\n    \n    function saveStop() {\n        // Get form values\n        const stopCode = document.getElementById(\'stopCode\').value;\n        const stopName = document.getElementById(\'stopName\').value;\n        const stopAddress = document.getElementById(\'stopAddress\').value;\n        const latitude = parseFloat(document.getElementById(\'stopLatitude\').value);\n        const longitude = parseFloat(document.getElementById(\'stopLongitude\').value);\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Validate form\n        if (!stopCode || !stopName || isNaN(latitude) || isNaN(longitude)) {\n            alert(\'Please fill all required fields with valid values\');\n            return;\n        }\n        \n        // Build the stop data\n        const stopData = {\n            stop_code: stopCode,\n            name: stopName,\n            address: stopAddress,\n            latitude: latitude,\n            longitude: longitude,\n            is_active: isActive\n        };\n        \n        // This would be replaced with an actual API call\n        console.log(\'Stop data to save:\', stopData);\n        \n        // Simulate API call (in a real app, this would be a fetch POST request)\n        setTimeout(() => {\n            alert(\'Stop added successfully (simulated)\');\n            \n            // Close modal and reset form\n            const modal = bootstrap.Modal.getInstance(document.getElementById(\'addStopModal\'));\n            modal.hide();\n            document.getElementById(\'addStopForm\').reset();\n            \n            // Refresh the stops map\n            refreshStopsMap();\n        }, 500);\n    }\n    \n    function viewStop(stopId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/stops?id=${stopId}`)\n            .then(response => response.json())\n            .then(stops => {\n                const stop = stops.find(s => s.id == stopId);\n                \n                if (stop) {\n                    // Populate the view modal with stop details\n                    document.getElementById(\'viewStopCode\').textContent = stop.stop_code;\n                    document.getElementById(\'viewStopName\').textContent = stop.name;\n                    document.getElementById(\'viewStopAddress\').textContent = stop.address || \'N/A\';\n                    document.getElementById(\'viewStopCoordinates\').textContent = \n                        `${stop.latitude.toFixed(6)}, ${stop.longitude.toFixed(6)}`;\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewStopStatus\');\n                    if (stop.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the map\n                    const viewMap = L.map(\'viewStopMap\').setView([stop.latitude, stop.longitude], 15);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(viewMap);\n                    \n                    // Add stop marker\n                    L.marker([stop.latitude, stop.longitude])\n                        .bindTooltip(stop.name)\n                        .addTo(viewMap);\n                    \n                    // Load routes for this stop\n                    fetch(\'/api/routes\')\n                        .then(response => response.json())\n                        .then(routes => {\n                            const routesTable = document.getElementById(\'viewStopRoutesTable\');\n                            routesTable.innerHTML = \'\';\n                            \n                            let foundRoutes = false;\n                            \n                            routes.forEach(route => {\n                                const stopsOnRoute = route.stops.filter(s => s.id === stop.id);\n                                \n                                stopsOnRoute.forEach(stopOnRoute => {\n                                    foundRoutes = true;\n                                    const row = document.createElement(\'tr\');\n                                    \n                                    row.innerHTML = `\n                                        <td>\n                                            <span class="badge bg-primary">${route.route_number}</span>\n                                            ${route.name}\n                                        </td>\n                                        <td>${stopOnRoute.sequence}</td>\n                                        <td>${stopOnRoute.scheduled_arrival || \'N/A\'}</td>\n                                        <td>${stopOnRoute.scheduled_departure || \'N/A\'}</td>\n                                        <td>${stopOnRoute.distance_from_start ? stopOnRoute.distance_from_start + \' km\' : \'N/A\'}</td>\n                                    `;\n                                    \n                                    routesTable.appendChild(row);\n                                });\n                            });\n                            \n                            if (!foundRoutes) {\n                                routesTable.innerHTML = `\n                                    <tr>\n                                        <td colspan="5" class="text-center py-3">\n                                            No routes serve this stop\n                                        </td>\n                                    </tr>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading routes for stop:\', error);\n                            document.getElementById(\'viewStopRoutesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="5" class="text-center text-danger py-3">\n                                        Error loading route data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Load upcoming buses for this stop\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            // In a real app, we\'d fetch ETA predictions for this stop\n                            // For now, we\'ll just show a placeholder\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center py-3">\n                                        No upcoming buses scheduled at this time\n                                    </td>\n                                </tr>\n                            `;\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses for stop:\', error);\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center text-danger py-3">\n                                        Error loading bus data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Show the modal\n                    const modal = new bootstrap.Modal(document.getElementById(\'viewStopModal\'));\n                    modal.show();\n                    \n                    // Fix map rendering issues\n                    setTimeout(() => {\n                        viewMap.invalidateSize();\n                    }, 300);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error fetching stop details:\', error);\n                alert(\'Failed to load stop details\');\n            });\n    }\n    \n    function editStop(stopId) {\n        // In a real application, this would fetch the stop data and populate the edit form\n        alert(`Edit stop ${stopId} (not implemented in this demo)`);\n    }\n    \n    function deleteStop(stopId) {\n        // In a real application, this would show a confirmation dialog and then delete the stop\n        if (confirm(`Are you sure you want to delete stop with ID ${stopId}?`)) {\n            alert(`Stop ${stopId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/stops.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 166ebe7014e433014365d955ede81a7a080aa1e360b6fd3dc3ab4e28db0b672f2c1f28852e44def486ac35884f6bd02c5e15112ebb94c4391b82f92a72d87a1e_0
2025-05-25 18:29:08,517 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize the stops map\n        initStopsMap();\n        \n        // Set up event listeners\n        document.getElementById(\'saveStopBtn\').addEventListener(\'click\', saveStop);\n        document.getElementById(\'refresh-stops-map\').addEventListener(\'click\', refreshStopsMap);\n        document.getElementById(\'center-stops-map\').addEventListener(\'click\', centerStopsMap);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                viewStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                editStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                deleteStop(stopId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'stopSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#stopTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n        \n        // Initialize map for adding stops\n        const pickLocationMap = L.map(\'pickLocationMap\').setView([51.505, -0.09], 13);\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(pickLocationMap);\n        \n        let marker;\n        \n        pickLocationMap.on(\'click\', function(e) {\n            // Update form fields with coordinates\n            document.getElementById(\'stopLatitude\').value = e.latlng.lat.toFixed(6);\n            document.getElementById(\'stopLongitude\').value = e.latlng.lng.toFixed(6);\n            \n            // Update or add marker\n            if (marker) {\n                marker.setLatLng(e.latlng);\n            } else {\n                marker = L.marker(e.latlng).addTo(pickLocationMap);\n            }\n        });\n        \n        // Reinitialize map when modal is shown\n        document.getElementById(\'addStopModal\').addEventListener(\'shown.bs.modal\', function() {\n            pickLocationMap.invalidateSize();\n            \n            // Use current map center or user location as starting point\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    position => {\n                        pickLocationMap.setView([position.coords.latitude, position.coords.longitude], 15);\n                    },\n                    error => {\n                        console.warn(\'Geolocation error:\', error);\n                    }\n                );\n            }\n        });\n    });\n    \n    // Initialize the stops map\n    let stopsMap;\n    let stopsMarkers = [];\n    \n    function initStopsMap() {\n        stopsMap = L.map(\'stop-map\').setView([51.505, -0.09], 13);\n        \n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(stopsMap);\n        \n        // Load stops from API\n        loadStopsOnMap();\n    }\n    \n    function loadStopsOnMap() {\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                // Clear existing markers\n                stopsMarkers.forEach(marker => stopsMap.removeLayer(marker));\n                stopsMarkers = [];\n                \n                if (stops.length > 0) {\n                    const bounds = L.latLngBounds();\n                    \n                    stops.forEach(stop => {\n                        const marker = L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(`<b>${stop.stop_code}</b>: ${stop.name}`)\n                            .bindPopup(`\n                                <div>\n                                    <h6>${stop.name}</h6>\n                                    <p><strong>Code:</strong> ${stop.stop_code}</p>\n                                    <p><strong>Address:</strong> ${stop.address || \'N/A\'}</p>\n                                    <button class="btn btn-sm btn-primary view-stop-btn" \n                                        data-stop-id="${stop.id}">View Details</button>\n                                </div>\n                            `)\n                            .addTo(stopsMap);\n                            \n                        // Add click event to the View Details button in popup\n                        marker.on(\'popupopen\', function() {\n                            const popupButton = document.querySelector(\'.view-stop-btn\');\n                            if (popupButton) {\n                                popupButton.addEventListener(\'click\', function() {\n                                    const stopId = this.getAttribute(\'data-stop-id\');\n                                    viewStop(stopId);\n                                });\n                            }\n                        });\n                        \n                        stopsMarkers.push(marker);\n                        bounds.extend([stop.latitude, stop.longitude]);\n                    });\n                    \n                    // Fit map to show all stops\n                    stopsMap.fitBounds(bounds);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n                alert(\'Failed to load stops data\');\n            });\n    }\n    \n    function refreshStopsMap() {\n        loadStopsOnMap();\n    }\n    \n    function centerStopsMap() {\n        if (stopsMarkers.length > 0) {\n            const bounds = L.latLngBounds(stopsMarkers.map(marker => marker.getLatLng()));\n            stopsMap.fitBounds(bounds);\n        }\n    }\n    \n    function saveStop() {\n        // Get form values\n        const stopCode = document.getElementById(\'stopCode\').value;\n        const stopName = document.getElementById(\'stopName\').value;\n        const stopAddress = document.getElementById(\'stopAddress\').value;\n        const latitude = parseFloat(document.getElementById(\'stopLatitude\').value);\n        const longitude = parseFloat(document.getElementById(\'stopLongitude\').value);\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Validate form\n        if (!stopCode || !stopName || isNaN(latitude) || isNaN(longitude)) {\n            alert(\'Please fill all required fields with valid values\');\n            return;\n        }\n        \n        // Build the stop data\n        const stopData = {\n            stop_code: stopCode,\n            name: stopName,\n            address: stopAddress,\n            latitude: latitude,\n            longitude: longitude,\n            is_active: isActive\n        };\n        \n        // This would be replaced with an actual API call\n        console.log(\'Stop data to save:\', stopData);\n        \n        // Simulate API call (in a real app, this would be a fetch POST request)\n        setTimeout(() => {\n            alert(\'Stop added successfully (simulated)\');\n            \n            // Close modal and reset form\n            const modal = bootstrap.Modal.getInstance(document.getElementById(\'addStopModal\'));\n            modal.hide();\n            document.getElementById(\'addStopForm\').reset();\n            \n            // Refresh the stops map\n            refreshStopsMap();\n        }, 500);\n    }\n    \n    function viewStop(stopId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/stops?id=${stopId}`)\n            .then(response => response.json())\n            .then(stops => {\n                const stop = stops.find(s => s.id == stopId);\n                \n                if (stop) {\n                    // Populate the view modal with stop details\n                    document.getElementById(\'viewStopCode\').textContent = stop.stop_code;\n                    document.getElementById(\'viewStopName\').textContent = stop.name;\n                    document.getElementById(\'viewStopAddress\').textContent = stop.address || \'N/A\';\n                    document.getElementById(\'viewStopCoordinates\').textContent = \n                        `${stop.latitude.toFixed(6)}, ${stop.longitude.toFixed(6)}`;\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewStopStatus\');\n                    if (stop.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the map\n                    const viewMap = L.map(\'viewStopMap\').setView([stop.latitude, stop.longitude], 15);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(viewMap);\n                    \n                    // Add stop marker\n                    L.marker([stop.latitude, stop.longitude])\n                        .bindTooltip(stop.name)\n                        .addTo(viewMap);\n                    \n                    // Load routes for this stop\n                    fetch(\'/api/routes\')\n                        .then(response => response.json())\n                        .then(routes => {\n                            const routesTable = document.getElementById(\'viewStopRoutesTable\');\n                            routesTable.innerHTML = \'\';\n                            \n                            let foundRoutes = false;\n                            \n                            routes.forEach(route => {\n                                const stopsOnRoute = route.stops.filter(s => s.id === stop.id);\n                                \n                                stopsOnRoute.forEach(stopOnRoute => {\n                                    foundRoutes = true;\n                                    const row = document.createElement(\'tr\');\n                                    \n                                    row.innerHTML = `\n                                        <td>\n                                            <span class="badge bg-primary">${route.route_number}</span>\n                                            ${route.name}\n                                        </td>\n                                        <td>${stopOnRoute.sequence}</td>\n                                        <td>${stopOnRoute.scheduled_arrival || \'N/A\'}</td>\n                                        <td>${stopOnRoute.scheduled_departure || \'N/A\'}</td>\n                                        <td>${stopOnRoute.distance_from_start ? stopOnRoute.distance_from_start + \' km\' : \'N/A\'}</td>\n                                    `;\n                                    \n                                    routesTable.appendChild(row);\n                                });\n                            });\n                            \n                            if (!foundRoutes) {\n                                routesTable.innerHTML = `\n                                    <tr>\n                                        <td colspan="5" class="text-center py-3">\n                                            No routes serve this stop\n                                        </td>\n                                    </tr>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading routes for stop:\', error);\n                            document.getElementById(\'viewStopRoutesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="5" class="text-center text-danger py-3">\n                                        Error loading route data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Load upcoming buses for this stop\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            // In a real app, we\'d fetch ETA predictions for this stop\n                            // For now, we\'ll just show a placeholder\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center py-3">\n                                        No upcoming buses scheduled at this time\n                                    </td>\n                                </tr>\n                            `;\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses for stop:\', error);\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center text-danger py-3">\n                                        Error loading bus data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Show the modal\n                    const modal = new bootstrap.Modal(document.getElementById(\'viewStopModal\'));\n                    modal.show();\n                    \n                    // Fix map rendering issues\n                    setTimeout(() => {\n                        viewMap.invalidateSize();\n                    }, 300);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error fetching stop details:\', error);\n                alert(\'Failed to load stop details\');\n            });\n    }\n    \n    function editStop(stopId) {\n        // In a real application, this would fetch the stop data and populate the edit form\n        alert(`Edit stop ${stopId} (not implemented in this demo)`);\n    }\n    \n    function deleteStop(stopId) {\n        // In a real application, this would show a confirmation dialog and then delete the stop\n        if (confirm(`Are you sure you want to delete stop with ID ${stopId}?`)) {\n            alert(`Stop ${stopId} deleted (simulated)`);\n        }\n    }\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // Initialize the stops map\n        initStopsMap();\n        \n        // Set up event listeners\n        document.getElementById(\'saveStopBtn\').addEventListener(\'click\', saveStop);\n        document.getElementById(\'refresh-stops-map\').addEventListener(\'click\', refreshStopsMap);\n        document.getElementById(\'center-stops-map\').addEventListener(\'click\', centerStopsMap);\n        \n        // Set up event listeners for view/edit/delete buttons\n        document.querySelectorAll(\'.view-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                viewStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.edit-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                editStop(stopId);\n            });\n        });\n        \n        document.querySelectorAll(\'.delete-stop\').forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const stopId = this.getAttribute(\'data-stop-id\');\n                deleteStop(stopId);\n            });\n        });\n        \n        // Set up search functionality\n        document.getElementById(\'stopSearch\').addEventListener(\'input\', function() {\n            const searchText = this.value.toLowerCase();\n            const rows = document.querySelectorAll(\'#stopTableBody tr\');\n            \n            rows.forEach(row => {\n                const text = row.textContent.toLowerCase();\n                row.style.display = text.includes(searchText) ? \'\' : \'none\';\n            });\n        });\n        \n        // Initialize map for adding stops\n        const pickLocationMap = L.map(\'pickLocationMap\').setView([51.505, -0.09], 13);\n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(pickLocationMap);\n        \n        let marker;\n        \n        pickLocationMap.on(\'click\', function(e) {\n            // Update form fields with coordinates\n            document.getElementById(\'stopLatitude\').value = e.latlng.lat.toFixed(6);\n            document.getElementById(\'stopLongitude\').value = e.latlng.lng.toFixed(6);\n            \n            // Update or add marker\n            if (marker) {\n                marker.setLatLng(e.latlng);\n            } else {\n                marker = L.marker(e.latlng).addTo(pickLocationMap);\n            }\n        });\n        \n        // Reinitialize map when modal is shown\n        document.getElementById(\'addStopModal\').addEventListener(\'shown.bs.modal\', function() {\n            pickLocationMap.invalidateSize();\n            \n            // Use current map center or user location as starting point\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    position => {\n                        pickLocationMap.setView([position.coords.latitude, position.coords.longitude], 15);\n                    },\n                    error => {\n                        console.warn(\'Geolocation error:\', error);\n                    }\n                );\n            }\n        });\n    });\n    \n    // Initialize the stops map\n    let stopsMap;\n    let stopsMarkers = [];\n    \n    function initStopsMap() {\n        stopsMap = L.map(\'stop-map\').setView([51.505, -0.09], 13);\n        \n        L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n            attribution: \'&copy; OpenStreetMap contributors\'\n        }).addTo(stopsMap);\n        \n        // Load stops from API\n        loadStopsOnMap();\n    }\n    \n    function loadStopsOnMap() {\n        fetch(\'/api/stops\')\n            .then(response => response.json())\n            .then(stops => {\n                // Clear existing markers\n                stopsMarkers.forEach(marker => stopsMap.removeLayer(marker));\n                stopsMarkers = [];\n                \n                if (stops.length > 0) {\n                    const bounds = L.latLngBounds();\n                    \n                    stops.forEach(stop => {\n                        const marker = L.marker([stop.latitude, stop.longitude])\n                            .bindTooltip(`<b>${stop.stop_code}</b>: ${stop.name}`)\n                            .bindPopup(`\n                                <div>\n                                    <h6>${stop.name}</h6>\n                                    <p><strong>Code:</strong> ${stop.stop_code}</p>\n                                    <p><strong>Address:</strong> ${stop.address || \'N/A\'}</p>\n                                    <button class="btn btn-sm btn-primary view-stop-btn" \n                                        data-stop-id="${stop.id}">View Details</button>\n                                </div>\n                            `)\n                            .addTo(stopsMap);\n                            \n                        // Add click event to the View Details button in popup\n                        marker.on(\'popupopen\', function() {\n                            const popupButton = document.querySelector(\'.view-stop-btn\');\n                            if (popupButton) {\n                                popupButton.addEventListener(\'click\', function() {\n                                    const stopId = this.getAttribute(\'data-stop-id\');\n                                    viewStop(stopId);\n                                });\n                            }\n                        });\n                        \n                        stopsMarkers.push(marker);\n                        bounds.extend([stop.latitude, stop.longitude]);\n                    });\n                    \n                    // Fit map to show all stops\n                    stopsMap.fitBounds(bounds);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error loading stops:\', error);\n                alert(\'Failed to load stops data\');\n            });\n    }\n    \n    function refreshStopsMap() {\n        loadStopsOnMap();\n    }\n    \n    function centerStopsMap() {\n        if (stopsMarkers.length > 0) {\n            const bounds = L.latLngBounds(stopsMarkers.map(marker => marker.getLatLng()));\n            stopsMap.fitBounds(bounds);\n        }\n    }\n    \n    function saveStop() {\n        // Get form values\n        const stopCode = document.getElementById(\'stopCode\').value;\n        const stopName = document.getElementById(\'stopName\').value;\n        const stopAddress = document.getElementById(\'stopAddress\').value;\n        const latitude = parseFloat(document.getElementById(\'stopLatitude\').value);\n        const longitude = parseFloat(document.getElementById(\'stopLongitude\').value);\n        const isActive = document.getElementById(\'isActive\').checked;\n        \n        // Validate form\n        if (!stopCode || !stopName || isNaN(latitude) || isNaN(longitude)) {\n            alert(\'Please fill all required fields with valid values\');\n            return;\n        }\n        \n        // Build the stop data\n        const stopData = {\n            stop_code: stopCode,\n            name: stopName,\n            address: stopAddress,\n            latitude: latitude,\n            longitude: longitude,\n            is_active: isActive\n        };\n        \n        // This would be replaced with an actual API call\n        console.log(\'Stop data to save:\', stopData);\n        \n        // Simulate API call (in a real app, this would be a fetch POST request)\n        setTimeout(() => {\n            alert(\'Stop added successfully (simulated)\');\n            \n            // Close modal and reset form\n            const modal = bootstrap.Modal.getInstance(document.getElementById(\'addStopModal\'));\n            modal.hide();\n            document.getElementById(\'addStopForm\').reset();\n            \n            // Refresh the stops map\n            refreshStopsMap();\n        }, 500);\n    }\n    \n    function viewStop(stopId) {\n        // This would be replaced with an actual API call\n        fetch(`/api/stops?id=${stopId}`)\n            .then(response => response.json())\n            .then(stops => {\n                const stop = stops.find(s => s.id == stopId);\n                \n                if (stop) {\n                    // Populate the view modal with stop details\n                    document.getElementById(\'viewStopCode\').textContent = stop.stop_code;\n                    document.getElementById(\'viewStopName\').textContent = stop.name;\n                    document.getElementById(\'viewStopAddress\').textContent = stop.address || \'N/A\';\n                    document.getElementById(\'viewStopCoordinates\').textContent = \n                        `${stop.latitude.toFixed(6)}, ${stop.longitude.toFixed(6)}`;\n                    \n                    // Set status badge\n                    const statusElement = document.getElementById(\'viewStopStatus\');\n                    if (stop.is_active) {\n                        statusElement.innerHTML = \'<span class="badge bg-success">Active</span>\';\n                    } else {\n                        statusElement.innerHTML = \'<span class="badge bg-danger">Inactive</span>\';\n                    }\n                    \n                    // Initialize the map\n                    const viewMap = L.map(\'viewStopMap\').setView([stop.latitude, stop.longitude], 15);\n                    L.tileLayer(\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\', {\n                        attribution: \'&copy; OpenStreetMap contributors\'\n                    }).addTo(viewMap);\n                    \n                    // Add stop marker\n                    L.marker([stop.latitude, stop.longitude])\n                        .bindTooltip(stop.name)\n                        .addTo(viewMap);\n                    \n                    // Load routes for this stop\n                    fetch(\'/api/routes\')\n                        .then(response => response.json())\n                        .then(routes => {\n                            const routesTable = document.getElementById(\'viewStopRoutesTable\');\n                            routesTable.innerHTML = \'\';\n                            \n                            let foundRoutes = false;\n                            \n                            routes.forEach(route => {\n                                const stopsOnRoute = route.stops.filter(s => s.id === stop.id);\n                                \n                                stopsOnRoute.forEach(stopOnRoute => {\n                                    foundRoutes = true;\n                                    const row = document.createElement(\'tr\');\n                                    \n                                    row.innerHTML = `\n                                        <td>\n                                            <span class="badge bg-primary">${route.route_number}</span>\n                                            ${route.name}\n                                        </td>\n                                        <td>${stopOnRoute.sequence}</td>\n                                        <td>${stopOnRoute.scheduled_arrival || \'N/A\'}</td>\n                                        <td>${stopOnRoute.scheduled_departure || \'N/A\'}</td>\n                                        <td>${stopOnRoute.distance_from_start ? stopOnRoute.distance_from_start + \' km\' : \'N/A\'}</td>\n                                    `;\n                                    \n                                    routesTable.appendChild(row);\n                                });\n                            });\n                            \n                            if (!foundRoutes) {\n                                routesTable.innerHTML = `\n                                    <tr>\n                                        <td colspan="5" class="text-center py-3">\n                                            No routes serve this stop\n                                        </td>\n                                    </tr>\n                                `;\n                            }\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading routes for stop:\', error);\n                            document.getElementById(\'viewStopRoutesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="5" class="text-center text-danger py-3">\n                                        Error loading route data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Load upcoming buses for this stop\n                    fetch(\'/api/buses\')\n                        .then(response => response.json())\n                        .then(buses => {\n                            // In a real app, we\'d fetch ETA predictions for this stop\n                            // For now, we\'ll just show a placeholder\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center py-3">\n                                        No upcoming buses scheduled at this time\n                                    </td>\n                                </tr>\n                            `;\n                        })\n                        .catch(error => {\n                            console.error(\'Error loading buses for stop:\', error);\n                            document.getElementById(\'viewStopBusesTable\').innerHTML = `\n                                <tr>\n                                    <td colspan="4" class="text-center text-danger py-3">\n                                        Error loading bus data\n                                    </td>\n                                </tr>\n                            `;\n                        });\n                    \n                    // Show the modal\n                    const modal = new bootstrap.Modal(document.getElementById(\'viewStopModal\'));\n                    modal.show();\n                    \n                    // Fix map rendering issues\n                    setTimeout(() => {\n                        viewMap.invalidateSize();\n                    }, 300);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error fetching stop details:\', error);\n                alert(\'Failed to load stop details\');\n            });\n    }\n    \n    function editStop(stopId) {\n        // In a real application, this would fetch the stop data and populate the edit form\n        alert(`Edit stop ${stopId} (not implemented in this demo)`);\n    }\n    \n    function deleteStop(stopId) {\n        // In a real application, this would show a confirmation dialog and then delete the stop\n        if (confirm(`Are you sure you want to delete stop with ID ${stopId}?`)) {\n            alert(`Stop ${stopId} deleted (simulated)`);\n        }\n    }\n</script>\n', PosixPath('templates/stops.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 166ebe7014e433014365d955ede81a7a080aa1e360b6fd3dc3ab4e28db0b672f2c1f28852e44def486ac35884f6bd02c5e15112ebb94c4391b82f92a72d87a1e_0
2025-05-25 18:29:08,520 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:03.207483 on 25 files
2025-05-25 18:29:08,521 - semgrep.core_runner - DEBUG - findings summary: 19 warning, 2 error, 1 info
2025-05-25 18:29:08,523 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-05-25 18:29:08,523 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-05-25 18:29:08,524 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIfGslmI/semgrep/bin/semgrep-core-proprietary'.
2025-05-25 18:29:08,666 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   • <none>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Files skipped due to insufficient read permissions:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • <none>

  Partially analyzed due to parsing or internal Opengrep errors

   • templates/api_docs.html (12 lines skipped)
   • templates/buses.html (10 lines skipped)
   • templates/index.html (12 lines skipped)
   • templates/routes.html (24 lines skipped)
   • templates/stops.html (13 lines skipped)

2025-05-25 18:29:08,668 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.
  Partially scanned: 5 files only partially analyzed due to parsing or internal Opengrep errors

Ran 682 rules on 25 files: 22 findings.
2025-05-25 18:29:08,669 - semgrep.app.version - DEBUG - Version cache does not exist
2025-05-25 18:29:08,687 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
